<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LibraryTests</name>
    </assembly>
    <members>
        <member name="T:Test.Library.AdministradorHandlersTests">
            <summary>
            Esta clase permite probar todos los handlers destinados al administrador.
            </summary>
        </member>
        <member name="M:Test.Library.AdministradorHandlersTests.InvitarEmpresayCrearEmpresaHandlersTest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Test.Library.AdministradorHandlersTests.RegistrarAdminHandlerTest">
            <summary>
            
            </summary>
        </member>
        <member name="T:Test.Library.AdministradorTests">
            <summary>
            Esta clase permite generar los test necesarios para poder comprobar la que la clase Administrador funcione correctamente.
            </summary>
        </member>
        <member name="M:Test.Library.AdministradorTests.TestAdministrador">
            <summary>
            Este test comprueba que se puedan inicializar instancias de la clase Administrador.
            </summary>
        </member>
        <member name="M:Test.Library.AdministradorTests.TestInvitar">
            <summary>
            Este test lo que permite es ver si el metodo InvitarEmpresa de la Clase Administrador funciona.
            Para poder realizar esto se instancia un administrador y una empresa luego el administrador invita a la empresa a unirse.
            Inicialmente la lista de empresas que tiene el administrador esta vacia, pero cuando se invita a la empresa pasa a tener 1 miembro, que es lo que evalua este test.
            </summary>
        </member>
        <member name="M:Test.Library.AdministradorTests.TestAdministradorFalso">
            <summary>
            Este test está diseñado para que de error, ya que se espera un nombre y no un string vacio.
            Esto da por defecto el nombre Jhon.
            </summary>
        </member>
        <member name="T:Test.Library.EmprendedorHandlersTests">
            <summary>
            Esta clase permite probar todos los handlers destinados al emprendedor.
            </summary>
        </member>
        <member name="M:Test.Library.EmprendedorHandlersTests.BuscadorTagHandlerTest">
            <summary>
            En este test, se crea una emprendedor, el cual ejecuta a través de telegram una búsqueda por tag con el tag "tagtest".
            Luego, una empresa creada anteriormente crea una oferta con ese mismo tag.
            Al ejecutar la búsqueda, se puede comprobar el correcto funcionamiento del BuscadorTagHandler, por como efectivamente
            aparece la oferta.
            </summary>
        </member>
        <member name="M:Test.Library.EmprendedorHandlersTests.BuscadorMaterialHandlerTest">
            <summary>
            En este test, se crea una emprendedor, el cual ejecuta a través de telegram una búsqueda por material con el material "esteesunmaterial".
            Luego, una empresa creada anteriormente crea una oferta con ese mismo material.
            Al ejecutar la búsqueda, se puede comprobar el correcto funcionamiento del BuscadorMaterialHandler, por como efectivamente
            aparece la oferta.
            </summary>
        </member>
        <member name="M:Test.Library.EmprendedorHandlersTests.BuscadorUbicacionHandlerTest">
            <summary>
            En este test, se crea una emprendedor, el cual ejecuta a través de telegram una búsqueda por ubicación con la ubicación "test".
            Luego, una empresa creada anteriormente crea una oferta con esa misma ubicación.
            Al ejecutar la búsqueda, se puede comprobar el correcto funcionamiento del BuscadorUbicacionHandler, por como efectivamente
            aparece la oferta.
            </summary>
        </member>
        <member name="M:Test.Library.EmprendedorHandlersTests.AgregarHabEmprendedorHandlerTestBien">
            <summary>
            En este test, se crea un emprendedor, el cual ejecuta a través de telegram quiere agregarse habilitaciones.
            Para eso, ejecuta el comando "/agregarhabilitacionemprendedor", y luego se agrega la habilitación "SOA".
            Con esto, se demuestra el correcto funcionamiento del AgregarHabEmprendedorHandler.
            </summary>
        </member>
        <member name="M:Test.Library.EmprendedorHandlersTests.RemoverHabEmprendedorHandlerTestBien">
            <summary>
            En este test, se crea un emprendedor, el cual ejecuta a través de telegram quiere removerse habilitaciones.
            Para eso, ejecuta el comando "removerhabemprendedor", y luego se remueve la habilitación "SOA".
            Con esto, se demuestra el correcto funcionamiento del RemoverHabEmprendedorHandler.
            </summary>
        </member>
        <member name="M:Test.Library.EmprendedorHandlersTests.InteresadoenOfertayCalcularOfertasCompradasHandlerTestBien">
            <summary>
            En este test, se demuestra el correcto funcionamiento de CalcularOfertasCompradasHandler y InteresadoEnOfertaHandler.
            Para eso, se crean una empresa y un emprendedor
            El primero, publica una oferta. El segundo, por su parte, busca interesarse en esa oferta con "/interesarme",
            para luego fijarse si realmente funcionó su manifestación de interés, con "/calcularofertascompradas".
            </summary>
        </member>
        <member name="M:Test.Library.EmprendedorHandlersTests.ListadeHabilitacionesHandlerTestBien">
            <summary>
            En este test, se busca demostrar el correcto funcionamiento del GetHabListHandler.
            Con ese objetivo, un emprendedor, que ya cuenta con su habilitación "SOA", busca corroborar si efectivamente la tiene.
            Para eso, utiliza "/listadehabilitaciones".
            Al final, se puede observar, como el Handler funciona correctamente.
            </summary>
        </member>
        <member name="M:Test.Library.EmprendedorHandlersTests.RegistroEmprendedorHandlerTestBien">
            <summary>
            En este test, un usuario busca registrarse como emprendedor.
            Con ese objetivo en mente, utiliza "registrarme" y va llenando los campos que corresponden a medida
            que le vayan surgiendo.
            Con esto, queda demostrado el correcto funcionamiento del RegistroEmprendedorHandler.
            </summary>
        </member>
        <member name="T:Test.Library.EmprendedorTests">
            <summary>
            Esta clase permite realizar los tests de la clase Emprendedor.
            </summary>
        </member>
        <member name="M:Test.Library.EmprendedorTests.TestRegistroEmprendedor">
            <summary>
            Test que sirve para chequear el correcto funcionamiento de una creación de una instancia de Emprendedor.
            </summary>
        </member>
        <member name="M:Test.Library.EmprendedorTests.TestAddHabilitaciones">
            <summary>
            Test que sirve para chequear el correcto funcionamiento del método AddHabilitacion.
            </summary>
        </member>
        <member name="M:Test.Library.EmprendedorTests.TestQuitarHabilitaciones">
            <summary>
            Test que sirve para chequear el correcto funcionamiento del método RemoveHabilitacion.
            </summary>
        </member>
        <member name="M:Test.Library.EmprendedorTests.TestQuitarHabilitacionesMal">
            <summary>
            Test que sirve para ver que sucede al intentar eliminar una habilitación que no existe.
            </summary>
        </member>
        <member name="M:Test.Library.EmprendedorTests.TestAddHabilitacionesMal">
            <summary>
            Test que sirve para ver el comportamiento del código al añadirle al emprendedor una habilitacion que no existe.
            </summary>
        </member>
        <member name="T:Test.Library.EmpresaHandlerTests">
            <summary>
            Esta clase permite probar todos los handlers destinados a la empresa.
            </summary>
        </member>
        <member name="M:Test.Library.EmpresaHandlerTests.CrearOfertaHandlerTest">
            <summary>
            Este test se encarga de Crear una oferta pasando por cada requerimiento
            para ver si todo funciona correctamente.
            </summary>
        </member>
        <member name="M:Test.Library.EmpresaHandlerTests.AddHabOfertaHandlerTest">
            <summary>
            En este test, una empresa desea, a través de telegram, añadile una habilitación a una oferta.
            Para eso, utiliza "agregarhaboferta".
            Con esto, se verifica el correcto funcionamiento del AgregarHabOfertaHandler.
            </summary>
        </member>
        <member name="M:Test.Library.EmpresaHandlerTests.RemoverHabEmpresaHandlerTest">
            <summary>
            En este test, se valúa el correcto funcionamiento del RemoverHabEmpresaHandler.
            Para eso, una empresa utiliza el comando "/removerhabempresa" a través de telegram.
            </summary>
        </member>
        <member name="M:Test.Library.EmpresaHandlerTests.AgregarHabEmpresaHandlerTest">
            <summary>
            Test que prueba el AgregarHabEmpresaHandler.
            Para eso, una empresa utiliza el comando "agregarhabilitacionempresa" a través de telegram.
            </summary>
        </member>
        <member name="M:Test.Library.EmpresaHandlerTests.InteresadoenOfertaCalcularOfertasVendidasyAceptarOfertaHandlerTestBien">
            <summary>
            En este test, se evalúan varios handlers en uno: InteresadoEnOfertaHandler, CalcularOfertasVendidasHandler y AceptarOfertaHandler.
            Aquí interactúan dos usuarios, una empresa, que es la que crea la oferta y la publica, y un emprendedor, que manifiesta
            su interés en ella.
            Luego, la empresa acepta su interés, y, para estar seguro de que todo funciona bien, chequeó su venta con
            "/calcularofertasvendidas".
            Esto corrobora el correcto funcionamiento de todos los handlers utilizados aquí.
            </summary>
        </member>
        <member name="M:Test.Library.EmpresaHandlerTests.AceptarInvEmpresaHandlerTest">
            <summary>
            Evalúa lo sucedido al una empresa aceptar la invitación de un administrador.
            Corrobora el funcionamiento de AceptarInvEmpresaHandler.
            </summary>
        </member>
        <member name="M:Test.Library.EmpresaHandlerTests.RemoverHabOfertaHandlerTest">
            <summary>
            En este test, una empresa desea remover a través de telegram, una habilitación a su oferta.
            Para esto, utiliza el comando "/removerhaboferta".
            Este test corrobora el funcionamiento de RemoverHabOfertaHandler.
            </summary>
        </member>
        <member name="T:Test.Library.EmpresaTests">
            <summary>
            Esta clase permite realizar los tests de la clase Empresa.
            </summary>
        </member>
        <member name="M:Test.Library.EmpresaTests.EmpresaTest">
            <summary>
            Test que sirve para chequear el correcto funcionamiento de una creación de una instancia de Empresa.
            </summary>
        </member>
        <member name="M:Test.Library.EmpresaTests.TestAddHabilitaciones">
            <summary>
            Test que sirve para chequear el correcto funcionamiento del método AddHabilitacion.
            </summary>
        </member>
        <member name="M:Test.Library.EmpresaTests.TestQuitarHabilitaciones">
            <summary>
            Test que sirve para chequear el correcto funcionamiento del método RemoveHabilitacion.
            </summary>
        </member>
        <member name="M:Test.Library.EmpresaTests.TestAddHabilitacionesMal">
            <summary>
            Test que chequea que sucede si se agrega una habilitación que no existe a una empresa.
            </summary>
        </member>
        <member name="M:Test.Library.EmpresaTests.TestQuitarHabilitacionesMal">
            <summary>
            Test que chequea que sucede si se intenta remover una habilitación que no está en la lista
            a una empresa.
            </summary>
        </member>
        <member name="T:Test.Library.GeneralTests">
            <summary>
            Clase de pruebas de TestGeneral.
            </summary>
        </member>
        <member name="M:Test.Library.GeneralTests.TestGeneral1">
            <summary>
            Test de historia de usuario.
            Se crean 1 empresa y 1 emprendedor, la empresa publica 3 ofertas, se hace una busqueda por tags en esas publicaciones el emprendedor se interesa en una oferta y por último la empresa acepta una oferta.
            </summary>
        </member>
        <member name="T:Test.Library.GeneralTests2">
            <summary>
            Clase de pruebas de TestGeneral.
            </summary>
        </member>
        <member name="M:Test.Library.GeneralTests2.TestGeneral2">
            <summary>
            Test historia de usuario2
            Tenemos una empresa y un emprendedor, la empresa crea productos, y se quiere comprobar
            si el método para calcular ofertas entregadas/consumidas segun tiempo funcionan acorde a lo estipulado.
            </summary>
        </member>
        <member name="T:Test.Library.GeneralTests3">
            <summary>
            Clase de pruebas de TestGeneral.
            </summary>
        </member>
        <member name="M:Test.Library.GeneralTests3.TestGeneral3">
            <summary>
            Tenemos una empresa que crea sus ofertas para poder despues realizar una busqueda por ubicación, tag, material.
            </summary>
        </member>
        <member name="T:Test.Library.HabilitacionesTests">
            <summary>
            Esta clase permite realizar los test de la clase Habilitaciones.
            Los métodos de la clase Habilitaciones son testeados uno por uno.
            </summary>
        </member>
        <member name="M:Test.Library.HabilitacionesTests.TestHabilitacion">
            <summary>
            Este método permite evaluar lo que sucede cuando se crea una habilitación con nombre.
            </summary>
        </member>
        <member name="T:Test.Library.LimpiadorCadenasTests">
            <summary>
            Esta clase permite testear todas los comportamientos que va a tener la clase LimpiadorCadenas.
            Dicha clase lo que hace es tomar las cadenas de caracteres que el usuario de la aplicacion ingreso y las pasa a un tipo de cadena, que son las que se espera recibir, en minusculas, sin tildes y sin espacios accidentales.
            En el este caso trabaja tambien con numeros, los cuales no modifica.
            </summary>
        </member>
        <member name="M:Test.Library.LimpiadorCadenasTests.TestLimpiaCadena">
            <summary>
            Este metodo permite testear la cadena "Ho lA" que fue ingresada por un Usuario como existen muchas formas de escribir la palabra "hola", tales como "Hola","HOLA","hola", etc.
            Necesitamos alguna forma de poder trabajar con esa cadena, por lo cual utilizamos el método LimpiaCadena de la Clase LimpiadorCadenas.
            </summary>
        </member>
        <member name="M:Test.Library.LimpiadorCadenasTests.TestLimpiaCadena2">
            <summary>
            Este método de prueba permite comprobar que lo unico que se modifica aplicando el metodo LimpiaCadena son los caracteres alfabeticos, que en el caso de contener numeros, los mismos continuan estando tal como se ingresaron.
            </summary>
        </member>
        <member name="M:Test.Library.LimpiadorCadenasTests.TestLimpiaCadenaRespuesta">
            <summary>
            Este test permite validar el método LimpiaCadenaRespuesta de la clase LimpiadorCadenas.
            En los ejemplos anteriores teniamos pruebas para cuando se ingresaba solo una palabra como Nombre, rubro, etc.
            Ahora con este método se permite evaluar acciones o respuestas del usuario para este test utilizaremos la cadena "Hola, COMO estás?" que contiene todos los elementos para testear.
            </summary>
        </member>
        <member name="T:Test.Library.OfertaTests">
            <summary>
            Esta clase permite realizar los tests de la clase Oferta.
            </summary>
        </member>
        <member name="M:Test.Library.OfertaTests.TestCreacionOferta">
            <summary>
            Test que evalúa lo sucedido al crear una instancia de tipo Oferta.
            </summary>
        </member>
        <member name="M:Test.Library.OfertaTests.TestAgregarHabilitaciones">
            <summary>
            Test que sirve para chequear que el método AddHabilitación funciona correctamente.
            </summary>
        </member>
        <member name="M:Test.Library.OfertaTests.TestRemoverHabilitaciones">
            <summary>
            Test que chequea el correcto funcionamiento del método RemoveHabilitacion.
            </summary>
        </member>
        <member name="M:Test.Library.OfertaTests.TestAgregarHabilitacionesMal">
            <summary>
            Test que sirve para ver el comportamiento del código al añadirle a una oferta una habilitación que no existe.
            </summary>
        </member>
        <member name="M:Test.Library.OfertaTests.TestRemoverHabilitacionesMal">
            <summary>
            Test que sirve para ver el comportamiento del código al intentar eliminar una habilitación
            que no existe a una oferta.
            </summary>
        </member>
        <member name="T:Test.Library.RubroTests">
            <summary>
            Clase de pruebas de RubroTest.
            </summary>
        </member>
        <member name="M:Test.Library.RubroTests.TestCrearRubro">
            <summary>
            En este test vamos a verificar la correcta creación de un Rubro con nombre.
            </summary>
        </member>
        <member name="T:Test.Library.UsuarioTests">
            <summary>
            Creación de la clase UsuarioTest, esta misma clase nos permite probar los métodos de la clase Usuario para corroborar que todo funcione de forma esperada.
            </summary>
        </member>
        <member name="M:Test.Library.UsuarioTests.TestearUsuarioNombre">
            <summary>
            Testea el Nombre del Usuario para corroborar que la instancia fue creada correctamente.
            </summary>
        </member>
        <member name="M:Test.Library.UsuarioTests.TestearUsuarioUbicacion">
            <summary>
            Test para verificar que el usuario se haya creado de la forma correcta.
            </summary>
        </member>
        <member name="M:Test.Library.UsuarioTests.TestearUsuarioRubro">
            <summary>
            Testea el rubro del usuario para saber si la creación del mismo fue adecuada.
            </summary>
        </member>
    </members>
</doc>
