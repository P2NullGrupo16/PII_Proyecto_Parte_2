<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:ClassLibrary.Administrador">
            <summary>
            Esta clase representa al Administrador, persona que invitara a las empresas a ingresar a la aplicación.
            Esta clase se creo por Expert, porque es la experta en hacer y conocer las Empresas inicialmente. 
            </summary>
        </member>
        <member name="M:ClassLibrary.Administrador.#ctor(System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.Administrador"/>.
            </summary>
            <param name="nombre">Recibe por parametro un string de nombre.</param>
            <param name="clave">Recibe una clave de entrada.</param>
        </member>
        <member name="P:ClassLibrary.Administrador.Nombre">
            <summary>
            Obtiene o establece un valor que le da el nombre al administrador.
            </summary>
            <value>El valor del nombre es de tipo string.</value>
        </member>
        <member name="M:ClassLibrary.Administrador.CambioClave(System.String,System.String)">
            <summary>
            Este método sirve para que el administrador pueda cambiar su contraseña.
            </summary>
            <param name="password">Recibe como parametro la contraseña que se le da por defecto al administrador.</param>
            <param name="nuevaPassword">Recibe como parametro la nueva contraseña que el administrador desea para su cuenta.</param>
        </member>
        <member name="F:ClassLibrary.Administrador.Empresas">
            <summary>
            Esta lista contiene las empresas que el Administrador a invitado a unirse a la aplicación.
            </summary>
            <returns>Retorna la lista de Empresas que contiene.</returns>
        </member>
        <member name="M:ClassLibrary.Administrador.InvitarEmpresa(System.String,System.String,System.String)">
            <summary>
            Invita a la empresa a unirse en el bot.
            </summary>
            <param name="nombre">Recibe el nombre de la empresa como string.</param>
            <param name="ubicacion">Recibe la ubicacion de la empresa como un string.</param>
            <param name="rubro">Recibe el rubro de la empresa como un string.</param>
        </member>
        <member name="M:ClassLibrary.Administrador.ConvertToJson">
            <summary>
            Convierte a formato .Json.
            </summary>
            <returns>Tipo string.</returns>
        </member>
        <member name="T:ClassLibrary.BuscadorMaterial">
            <summary>
            Esta clase representa un buscador por Material, que implementa la interfaz IBuscador.
            La implementación de la interfaz es necesaria para unificar el nombre de su método con otras clases que tiene similares caracteristicas.
            </summary>
            <remarks>
            En este caso se aplicó Polimorfismo ya que evitamos tener una clase que haga una busqueda y dependiendo lo que quieras buscar se comporte de diferente forma.
            Lo que se hizo es que haya una interfaz IBuscador que tenga el método Buscar y que las clases que implementen la interfaz, implemente ese método pero a nivel interno funcionando de forma diferente a las otras clases que lo implementan.
            Se retorna lo que especifica el método en la interfaz, pero dependiendo la clase retorna la oferta que contenga lo buscado.
            </remarks>
        </member>
        <member name="M:ClassLibrary.BuscadorMaterial.Buscar(ClassLibrary.Publicaciones,System.String)">
            <summary>
            Busca ofertas en Publicaciones, según el material de la oferta.
            </summary>
            <param name="publicaciones">Publicaciones.</param>
            <param name="busqueda">Material a buscar.</param>
            <returns>Retorna las ofertas encontradas por Material, mediante una lista de tipo Oferta.</returns>
        </member>
        <member name="T:ClassLibrary.BuscadorTags">
            <summary>
            Clase buscador por tag, que implementa la interfaz IBuscador.
            La implementación de la interfaz es necesaria para unificar el nombre de su método con otras clases que tiene similares caracteristicas.
            </summary>
        </member>
        <member name="M:ClassLibrary.BuscadorTags.Buscar(ClassLibrary.Publicaciones,System.String)">
            <summary>
            Busca ofertas en Publicaciones según los tags de la oferta.
            </summary>
            <remarks>
            A la hora de comparar cuando se hace la búsqueda, especificamos que no sea una búsqueda lingüística agregando a System.StringComparison.OrdinalIgnoreCase
            como parámetro en la comparación.
            Esto quiere decir que las características que son específicas del lenguaje natural se omiten cuando se toman decisiones de comparación y también
            el uso de mayúsculas o minúsculas.
            Y como resultado el código será más rápido y ganará en precisión y confiabilidad.
            Se encarga de buscar ofertas según el Tags de la misma, implementa IBuscador.
            En este caso se aplicó Polimorfismo ya que evitamos tener una clase que haga una búsqueda y dependiendo lo que quieras buscar se comporte de diferente forma.
            Lo que se hizo es que haya una interfaz IBuscador que tenga el método Buscar y que las clases que implementen la interfaz, implemente ese método pero a nivel interno funcionando de forma diferente a las otras clases que lo implementan.
            Se retorna lo que especifica el método en la interfaz, pero dependiendo la clase retorna la oferta que contenga lo buscado.
            </remarks>
            <param name="publicaciones">Recibe un parametro de tipo Publicaciones con el nombre de "publicaciones".</param>
            <param name="busqueda">Recibe un parametro de tipo string con el nombre de "busqueda".</param>
            <returns>Retorna las ofertas encontradas por Tag, mediante una lista de tipo Oferta.</returns>
        </member>
        <member name="T:ClassLibrary.BuscadorUbicacion">
            <summary>
            Se encarga de buscar ofertas segun la ubicación de la misma, implementa IBuscador.
            La implementación de la interfaz es necesaria para unificar el nombre de su método con otras clases que tiene similares caracteristicas.
            En este caso se aplicó Polimorfismo ya que evitamos tener una clase que haga una busqueda y dependiendo lo que quieras buscar se comporte de diferente forma.
            Lo que se hizo es que haya una interfaz IBuscador que tenga el método Buscar y que las clases que implementen la interfaz, implemente ese método pero a nivel interno funcionando de forma diferente a las otras clases que lo implementan.
            Se retorna lo que especifica el método en la interfaz, pero dependiendo la clase retorna la oferta que contenga lo buscado.
            </summary>
        </member>
        <member name="M:ClassLibrary.BuscadorUbicacion.Buscar(ClassLibrary.Publicaciones,System.String)">
            <summary>
            Busca ofertas en las publicaciones, según la ubicación de la oferta.
            </summary>
            <param name="publicaciones">Publicaciones.</param>
            <param name="busqueda">Lo que se va a buscar.</param>
            <returns>Retorna las ofertas encontradas por Ubicación, mediante una lista de tipo Oferta.</returns>
        </member>
        <member name="T:ClassLibrary.ConsolePrinter">
            <summary>
            Esta clase se encarga de imprimir por consola los atributos de oferta.
            </summary>
            <remarks>
            En este caso se aplicó SRP para poder imprimir las ofertas sin tener que modificarlas a ellas.
            </remarks>
        </member>
        <member name="M:ClassLibrary.ConsolePrinter.OfertaPrinter(ClassLibrary.Oferta)">
            <summary>
            Este método imprime por consola los atributos de oferta.
            </summary>
            <param name="oferta">Una oferta.</param>
        </member>
        <member name="M:ClassLibrary.ConsolePrinter.DatoPrinter(System.String)">
            <summary>
            Este método imprime una string con información.
            </summary>
            <param name="dato"></param>
        </member>
        <member name="T:ClassLibrary.Emprendedor">
            <summary>
            Esta clase representa un Emprendedor, que se encarga de buscar ofertas, y de manifestar su interés en las que sean de su agrado.
            Esta clase que contiene habilitaciones requiere, que se implemente la interfaz IHabilitaciones.
            La implementación de la interfaz es necesaria para unificar el nombre de su método con otras clases que tiene similares caracteristicas.
            </summary>
        </member>
        <member name="F:ClassLibrary.Emprendedor.FechaDeOfertasCompradas">
            <summary>
            Este diccionario contiene las ofertas compradas y la fecha correspondiente.
            </summary>
            <returns></returns>
        </member>
        <member name="F:ClassLibrary.Emprendedor.OfertasInteresado">
            <summary>
            Ofertas en las que se interesa el emprendedor.
            </summary>
        </member>
        <member name="F:ClassLibrary.Emprendedor.HabilitacionesEmprendedor">
            <summary>
            Lista de habilitaciones del emprendedor.
            </summary>
        </member>
        <member name="M:ClassLibrary.Emprendedor.#ctor(System.String,System.String,System.String,ClassLibrary.Habilitaciones,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.Emprendedor"/>.
            Como la clase hereda de la clase Usuario, recibe por parametros los propios de Usuario y los particulares de Emprendedor.
            </summary>
            <param name="nombre">Nombre del emprededor.</param>
            <param name="ubicacion">Ubicación del emprendedor.</param>
            <param name="rubro">Rubro del emprendedor.</param>
            <param name="habilitacion">Habilitaciones del emprendedor.</param>
            <param name="especializaciones">Especializaciones del emprendedor.</param>
        </member>
        <member name="F:ClassLibrary.Emprendedor.Habilitacion">
            <summary>
            Habilitaciones del emprendedor.
            </summary>
        </member>
        <member name="P:ClassLibrary.Emprendedor.HabilitacionesDeEmprendedor">
            <summary>
            Obtiene una lista de las habilitaciones del emprendedor.
            </summary>
            <value>HabilitacionesEmprendedor.</value>
        </member>
        <member name="P:ClassLibrary.Emprendedor.Especializaciones">
            <summary>
            Obtiene o establece las Especializaciones del emprendedor.
            </summary>
        </member>
        <member name="M:ClassLibrary.Emprendedor.AddHabilitacion(System.String)">
            <summary>
            Agrega habilitaciones.
            </summary>
            <param name="habilitacionBuscada">Nombre de la habilitación a agregar.</param>
        </member>
        <member name="M:ClassLibrary.Emprendedor.RemoveHabilitacion(System.String)">
            <summary>
            Quita habilitaciones.
            </summary>
            <param name="habilitacion">Nombre de la habilitaciones a remover.</param>
        </member>
        <member name="M:ClassLibrary.Emprendedor.GetListaHabilitaciones">
            <summary>
            Muestra todas las habilitaciones posibles para agregar.
            </summary>
        </member>
        <member name="M:ClassLibrary.Emprendedor.CalcularOfertasCompradas(System.String,System.String)">
            <summary>
            Calcula cuantas ofertas se han comprado desde diferentes fechas, y cuanto dinero se gastó en ellas.
            </summary>
            <param name="fechaInicio">Fecha de inicio.</param>
            <param name="fechaFinal">Fecha de final.</param>
            <returns>Retorna las ofertas compradas dentro del período de tiempo especificado.</returns>
        </member>
        <member name="M:ClassLibrary.Emprendedor.TextoEmprendedor">
            <summary>
            Agregado por SRP y Expert, la responsabilidad de construir el texto, le corresponde a la clase emprendedor.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.Empresa">
            <summary>
            Esta clase representa una Empresa, que se encarga de crear Ofertas, eliminarlas, aceptarlas y calcular el consumo de ofertas.
            Esta clase que contiene habilitaciones requiere, que se implemente la interfaz IHabilitaciones.
            La implementación de la interfaz es necesaria para unificar el nombre de su método con otras clases que tiene similares caracteristicas.
            </summary>
            <remarks>
            Para esta clase se utilizó el patron de diseño de Expert, ya que desde nuestro punto de vista,
            la clase Empresa tiene metodos que sean exclusivos de su clase ya que es la que se encarga de conocer 
            todo lo necesario para hacer posible la ejecución de sus métodos, y que no sean necesarios para el resto de clases.
            Además, utilizamos herencia para lograr una refactorización de código aceptable, ya que sería muy tedioso y
            mala práctica reutilizar el código sin esta función que nos permite el lenguaje.
            </remarks>
        </member>
        <member name="M:ClassLibrary.Empresa.#ctor(System.String,System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.Empresa"/>.
            Como la clase hereda de la clase Usuario, recibe por parametros los propios de Usuario y los particulares de Empresa.
            </summary>
            <param name="nombre">Nombre de la empresa.</param>
            <param name="ubicacion">Ubicación de la empresa.</param>
            <param name="rubro">Rubro de la empresa.</param>
        </member>
        <member name="M:ClassLibrary.Empresa.AceptarInvitacion(System.String)">
            <summary>
            Acepta una invitación.
            </summary>
            <param name="nombreEmpresa">Nombre de la empresa.</param>
        </member>
        <member name="F:ClassLibrary.Empresa.FechaOfertasEntregadas">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:ClassLibrary.Empresa.Habilitacion">
            <summary>
            Habilitaciones de la empresa.
            </summary>
        </member>
        <member name="P:ClassLibrary.Empresa.HabilitacionesEmpresa">
            <summary>
            Obtiene las Habilitaciones que tiene la Empresa.
            </summary>
        </member>
        <member name="P:ClassLibrary.Empresa.InteresadosEnOfertas">
            <summary>
            Obtiene o establece los interesados en Ofertas que tiene la Empresa.
            </summary>
        </member>
        <member name="P:ClassLibrary.Empresa.OfertasAceptadas">
            <summary>
            Obtiene o establece Ofertas de la lista de OfertasAceptadas.
            </summary>
        </member>
        <member name="P:ClassLibrary.Empresa.MisOfertas">
            <summary>
            
            </summary>
        </member>
        <member name="M:ClassLibrary.Empresa.CrearOferta(ClassLibrary.Publicaciones,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Crea una Oferta, agrega objetos de Oferta, además de guardar instancias de Oferta en las listas ofertasAceptadas, interesadosEnOfertas.
            </summary>
            <param name="publicaciones">Publicaciones.</param>
            <param name="nombre">Nombre de la oferta.</param>
            <param name="material">Material de la oferta.</param>
            <param name="precio">Precio de la oferta.</param>
            <param name="unidad">Unidad de la oferta.</param>
            <param name="tags">Tags de la oferta (palabras claves).</param>
            <param name="ubicacion">Ubicación donde se en cuentra el producto que se ofrece.</param>
            <param name="puntualesConstantes">Si la oferta es constante o puntual.</param>
            <remarks>
            Se usa Creator.
            </remarks>
        </member>
        <member name="M:ClassLibrary.Empresa.EliminarOferta(System.String,ClassLibrary.Publicaciones)">
            <summary>
            Elimina una oferta creada de las publicaciones.
            </summary>
            <param name="nombreOfertaParaEliminar">Oferta a eliminar.</param>
            <param name="publicaciones">Publicaciones.</param>
        </member>
        <member name="M:ClassLibrary.Empresa.AceptarOferta(System.String,ClassLibrary.Publicaciones)">
            <summary>
            Quita de las publicaciones, la oferta que fue aceptada, ser aceptada implica que se llegó a un acuerdo con un emprendedor y se quiere quitar la oferta de las publicaciones, además de agregarla a la lista de ofertasAceptadas que contiene la empresa, para realizar un control de cuantas se aceptan.
            </summary>
            <param name="nombreOfertaParaAceptar">Oferta que se quiere aceptar.</param>
            <param name="publicaciones">Publicaciones.</param>
        </member>
        <member name="M:ClassLibrary.Empresa.CalcularOfertasVendidas(System.String,System.String)">
            <summary>
            Calcula cuantas ofertas se entregaron entre diferentes fechas.
            </summary>
            <param name="fechaInicio">Fecha inicio, se debe pasar fecha con formato AAAA-MM-DD.</param>
            <param name="fechaFinal">Fecha final, se debe pasar fecha con formato AAAA-MM-DD.</param>
            <returns>Retorna las ofertas vendidas dentro del período de tiempo especificado.</returns>
        </member>
        <member name="M:ClassLibrary.Empresa.AddHabilitacion(System.String)">
            <summary>
            Agrega habilitaciones que pueda tener la empresa.
            </summary>
            <param name="habilitacionBuscada">Habilitación a buscar.</param>
        </member>
        <member name="M:ClassLibrary.Empresa.RemoveHabilitacion(System.String)">
            <summary>
            Quita habilitaciones que tenga la Empresa.
            </summary>
            <param name="habilitacion">Habilitacion a eliminar.</param>
        </member>
        <member name="M:ClassLibrary.Empresa.GetListaHabilitaciones">
            <summary>
            Muestra todas las habilitaciones posibles para agregar.
            </summary>
        </member>
        <member name="M:ClassLibrary.Empresa.VerInteresados">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Empresa.TextoEmpresa">
            <summary>
            Agregado por SRP y Expert, la responsabilidad de construir el texto, le corresponde a la clase empresa.
            ya que conoce lo necesario.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Empresa.VerMisOfertas">
            <summary>
            Método que devuelve las ofertas publicadas por la empresa.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.Habilitaciones">
            <summary>
            Esta clase representa el global de las habilitaciones existentes, que implementa la interfaz IHabilitaciones.
            La implementación de la interfaz es necesaria para unificar el nombre de su método con otras clases que tiene similares caracteristicas.
            </summary>
        </member>
        <member name="F:ClassLibrary.Habilitaciones.ListaHabilitaciones">
            <summary>
            Esta lista contiene un conjunto de habilitaciones predeterminadas.
            </summary>
        </member>
        <member name="M:ClassLibrary.Habilitaciones.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.Habilitaciones"/>.
            </summary>
        </member>
        <member name="P:ClassLibrary.Habilitaciones.Nombre">
            <summary>
            Obtiene o establece el nombre de la habilitación.
            </summary>
            <value>Valor es un string del nombre.</value>
        </member>
        <member name="M:ClassLibrary.Habilitaciones.HabilitacionesDisponibles">
            <summary>
            Este método retorna un string con las habilitaciones de la lista.
            Para poder ver cuales son las habilitaciones utiliza un StringBuilder para poder obtener un string al final.
            </summary>
            <returns>Retorna las habilitaciones disponibles.</returns>
        </member>
        <member name="M:ClassLibrary.Habilitaciones.AddHabilitacion(System.String)">
            <summary>
            Este método permite agregar habilitaciones a la lista de habilitaciones.
            </summary>
            <param name="habilitacionBuscada"> Recibe un parametro de tipo string del nombre de la habilitación deseada.</param>
        </member>
        <member name="M:ClassLibrary.Habilitaciones.GetListaHabilitaciones">
            <summary>
            Este método imprime en consola la lista de habilitaciones para realizar esto utiliza un StringBuilder y recorre la lista de Habilitaciones.
            </summary>
        </member>
        <member name="M:ClassLibrary.Habilitaciones.RemoveHabilitacion(System.String)">
            <summary>
            Este método sirve para eliminar habilitaciones que estan en la lista de Habilitaciones.
            </summary>
            <param name="habilitacion">Recibe por parametro un string del nombre de la habilitación deseada.</param>
        </member>
        <member name="T:ClassLibrary.AceptarInvEmpresaHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "/aceptarinvitacion".
            </summary>
        </member>
        <member name="M:ClassLibrary.AceptarInvEmpresaHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            
            </summary>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.AceptarInvEmpresaHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje y determina si la Empresa aceptó la invitación.
            </summary>
            <param name="mensaje">Recibe por parametro el mensaje a procesar.</param>
            <param name="respuesta">Recibe por parametro la respuesta al mensaje procesado.</param>
            <returns>Retorna true si se ha podido realizar la operación, o false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.AceptarOfertaHandler">
            <summary>
            Esta clase contiene un método para aceptar una oferta.
            </summary>
        </member>
        <member name="M:ClassLibrary.AceptarOfertaHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Este método se encarga de aceptar una oferta.
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:ClassLibrary.AceptarOfertaHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            
            </summary>
            <param name="mensaje">Recibe por parametro el mensaje a procesar.</param>
            <param name="respuesta">Recibe por paramtro la respuesta al mensaje procesado.</param>
            <returns>Retorna true si se ha podido realizar la operación, o false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.AddHabEmprendedorHandler">
            <summary>
            Un "handler" del patrón Chain of Responsability que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:ClassLibrary.AddHabEmprendedorHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase.
            Esta clase procesa el mensaje ingresado por el usuario.
            </summary>
            <param name="next">Recibe por parametro el siguiente Handler.</param>
        </member>
        <member name="M:ClassLibrary.AddHabEmprendedorHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Este método procesa el mensaje "Agregar habilitación" y retorna true.
            En caso contrario retorna false.
            </summary>
            <param name="mensaje">Recibe por parametro el mensaje a procesar.</param>
            <param name="respuesta">Recibe por parametro la respuesta al mensaje procesado.</param>
            <returns>Retorna true si se ha podido realizar la operación, o false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.AddHabEmpresaHandler">
            <summary>
            Un "handler" del patrón Chain of Responsability que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:ClassLibrary.AddHabEmpresaHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase.
            Esta clase procesa el mensaje ingresado por el usuario.
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:ClassLibrary.AddHabEmpresaHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Este método procesa el mensaje "Agregar habilitación" y retorna true.
            En caso contrario retorna false.
            </summary>
            <param name="mensaje">Recibe por parametro el mensaje a procesar.</param>
            <param name="respuesta">Recibe por paramtro la respuesta al mensaje procesado.</param>
            <returns>Retorna true si se ha podido realizar la operación, o false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.BaseHandler">
            <summary>
            Clase base para implementar el patrón Chain of Responsibility. En ese patrón se pasa un mensaje a través de una
            cadena de "handlers" que pueden procesar o no el mensaje. Cada "handler" decide si procesa el mensaje, o si se lo
            pasa al siguiente. Esta clase base implmementa la responsabilidad de recibir el mensaje y pasarlo al siguiente
            "handler" en caso que el mensaje no sea procesado. La responsabilidad de decidir si el mensaje se procesa o no, y
            de procesarlo, se delega a las clases sucesoras de esta clase base.
            </summary>
        </member>
        <member name="P:ClassLibrary.BaseHandler.Next">
            <summary>
            Obtiene el próximo "handler".
            </summary>
            <value>El "handler" que será invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="P:ClassLibrary.BaseHandler.Keywords">
            <summary>
            Obtiene o asigna el conjunto de palabras clave que este "handler" puede procesar.
            </summary>
            <value>Un array de palabras clave.</value>
        </member>
        <member name="M:ClassLibrary.BaseHandler.#ctor(ClassLibrary.IHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.BaseHandler"/>.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.BaseHandler.#ctor(System.String[],ClassLibrary.IHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.BaseHandler"/> con una lista de comandos.
            </summary>
            <param name="keywords">La lista de comandos.</param>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.BaseHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Este método debe ser sobreescrito por las clases sucesores. La clase sucesora procesa el mensaje y retorna
            true o no lo procesa y retorna false.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="responder">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="M:ClassLibrary.BaseHandler.InternalCancel">
            <summary>
            Este método puede ser sobreescrito en las clases sucesores que procesan varios mensajes cambiando de estado
            entre mensajes deben sobreescribir este método para volver al estado inicial. En la clase base no hace nada.
            </summary>
        </member>
        <member name="M:ClassLibrary.BaseHandler.CanHandle(ClassLibrary.IMensaje)">
            <summary>
            Determina si este "handler" puede procesar el mensaje. En la clase base se utiliza el array
            <see cref="P:ClassLibrary.BaseHandler.Keywords"/> para buscar el texto en el mensaje ignorando mayúsculas y minúsculas. Las
            clases sucesores pueden sobreescribir este método para proveer otro mecanismo para determina si procesan o no
            un mensaje.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <returns>true si el mensaje puede ser pocesado; false en caso contrario.</returns>
        </member>
        <member name="M:ClassLibrary.BaseHandler.Handle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente "handler" si existe.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:ClassLibrary.BaseHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial. En los "handler" sin estado no hace nada. Los "handlers" que
            procesan varios mensajes cambiando de estado entre mensajes deben sobreescribir este método para volver al
            estado inicial.
            </summary>
        </member>
        <member name="M:ClassLibrary.BaseHandler.ChequearHandler(ClassLibrary.IMensaje,System.String)">
            <summary>
            Se encarga de verificar si se ingresa un comando que corresponda al handler, o si ingresa un mensaje/parametro que corresponda al handler.
            Al hacer este método, se puede reutilizar bastante código.
            Si el HistorialDeChats, no contiene el mensaje.Id, retorna true de todas formas ya que en los handlers, siempre se trabaja con mensaje.Id,
            y si no existe, siempre el handler retornará false y un out string response string.Empty, ya que los handlers son los responsables de encargarse.
            </summary>
            <param name="mensaje"></param>
            <param name="comando"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.BuscadorMaterialHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:ClassLibrary.BuscadorMaterialHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase Esta clase procesa el mensaje "hola".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.BuscadorMaterialHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            
            </summary>
            <param name="mensaje">Recibe por parametro el mensaje a procesar.</param>
            <param name="respuesta">Recibe por paramtro la respuesta al mensaje procesado.</param>
            <returns>Retorna true si se ha podido realizar la operación, o false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.BuscadorTagHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:ClassLibrary.BuscadorTagHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase Esta clase procesa el mensaje "hola".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.BuscadorTagHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            
            </summary>
            <param name="mensaje">Recibe por parametro el mensaje a procesar.</param>
            <param name="respuesta">Recibe por paramtro la respuesta al mensaje procesado.</param>
            <returns>Retorna true si se ha podido realizar la operación, o false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.BuscadorUbicacionHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:ClassLibrary.BuscadorUbicacionHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase Esta clase procesa el mensaje "hola".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.BuscadorUbicacionHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            
            </summary>
            <param name="mensaje">Recibe por parametro el mensaje a procesar.</param>
            <param name="respuesta">Recibe por paramtro la respuesta al mensaje procesado.</param>
            <returns>Retorna true si se ha podido realizar la operación, o false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.CalcularOfertasCompradasHandler">
            <summary>
            Un "handler" del patrón Chain of Responsability que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:ClassLibrary.CalcularOfertasCompradasHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase.
            Esta clase procesa el mensaje ingresado por el usuario.
            </summary>
            <param name="next">El próximo "handler."</param>
        </member>
        <member name="M:ClassLibrary.CalcularOfertasCompradasHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Este método procesa el mensaje "Calculas ofertas Vendidas" y retorna true.
            En caso contrario retorna false.
            </summary>
            <param name="mensaje">Recibe por parametro el mensaje a procesar.</param>
            <param name="respuesta">Recibe por paramtro la respuesta al mensaje procesado.</param>
            <returns>Retorna true si se ha podido realizar la operación, o false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.CalcularOfertasVendidasHandler">
            <summary>
            Un "handler" del patrón Chain of Responsability que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:ClassLibrary.CalcularOfertasVendidasHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase.
            Esta clase procesa el mensaje ingresado por el usuario.
            </summary>
            <param name="next">El próximo "handler"</param>
        </member>
        <member name="M:ClassLibrary.CalcularOfertasVendidasHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Este método procesa el mensaje "Calculas ofertas Vendidas" y retorna true.
            En caso contrario retorna false.
            </summary>
            <param name="mensaje">Recibe por parametro el mensaje a procesar.</param>
            <param name="respuesta">Recibe por paramtro la respuesta al mensaje procesado.</param>
            <returns>Retorna true si se ha podido realizar la operación, o false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.CambioClaveHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:ClassLibrary.CambioClaveHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase.
            Esta clase procesa el mensaje ingresado por el administrador.
            </summary>
            <param name="next">Recibe por parametro el siguiente Handler.</param>
        </member>
        <member name="M:ClassLibrary.CambioClaveHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Este metodo procesa el mensaje "cambiar clave".
            </summary>
            <param name="mensaje">Recibe por parametro el mensaje a procesar.</param>
            <param name="respuesta">Recibe por parametro la respuesta al mensaje procesado.</param>
            <returns>Retorna true si se ha podido realizar la operación, o false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.ComandosHandler">
            <summary>
            Esta clase contiene un método para aceptar una oferta.
            </summary>
        </member>
        <member name="M:ClassLibrary.ComandosHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Este método se encarga de aceptar una oferta.
            </summary>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.ComandosHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            
            </summary>
            <param name="mensaje">Recibe por parametro el mensaje a procesar.</param>
            <param name="respuesta">Recibe por paramtro la respuesta al mensaje procesado.</param>
            <returns>Retorna true si se ha podido realizar la operación, o false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.AddHabOfertaHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:ClassLibrary.AddHabOfertaHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase Esta clase procesa el mensaje "hola".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.AddHabOfertaHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje "Registrarse" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="mensaje">Recibe por parametro el mensaje a procesar.</param>
            <param name="respuesta">Recibe por paramtro la respuesta al mensaje procesado.</param>
            <returns>Retorna true si se ha podido realizar la operación, o false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.CrearOfertaHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:ClassLibrary.CrearOfertaHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase Esta clase procesa el mensaje "hola".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.CrearOfertaHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            
            </summary>
            <param name="mensaje">Recibe por parametro el mensaje a procesar.</param>
            <param name="respuesta">Recibe por paramtro la respuesta al mensaje procesado.</param>
            <returns>Retorna true si se ha podido realizar la operación, o false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.EliminarOfertaHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:ClassLibrary.EliminarOfertaHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase Esta clase procesa el mensaje "hola".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.EliminarOfertaHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje "!Eliminar oferta" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="mensaje">Recibe por parametro el mensaje a procesar.</param>
            <param name="respuesta">Recibe por paramtro la respuesta al mensaje procesado.</param>
            <returns>Retorna true si se ha podido realizar la operación, o false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.GetHabListEmprendedorHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:ClassLibrary.GetHabListEmprendedorHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase Esta clase procesa el mensaje "hola".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.GetHabListEmprendedorHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje "Lista de habilitaciones" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="mensaje">Recibe por parametro el mensaje a procesar.</param>
            <param name="respuesta">Recibe por paramtro la respuesta al mensaje procesado.</param>
            <returns>Retorna true si se ha podido realizar la operación, o false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.GetLisHabEmpresaHandler">
            <summary>
            Un "handler" del patrón Chain of Responsability que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:ClassLibrary.GetLisHabEmpresaHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase.
            Esta clase procesa el mensaje ingresado por el usuario.
            </summary>
            <param name="next">El próximo "handler"</param>
        </member>
        <member name="M:ClassLibrary.GetLisHabEmpresaHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Este método procesa el mensaje "Lista de habilitaciones" y retorna true.
            En caso contrario retorna false.
            </summary>
            <param name="mensaje">Recibe por parametro el mensaje a procesar.</param>
            <param name="respuesta">Recibe por paramtro la respuesta al mensaje procesado.</param>
            <returns>Retorna true si se ha podido realizar la operación, o false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.HistorialChat">
            <summary>
            
            </summary>
        </member>
        <member name="F:ClassLibrary.HistorialChat.MensajesDelUser">
            <summary>
            Contiene los mensajes enviados por el Usuario.
            </summary>
            <returns></returns>
        </member>
        <member name="F:ClassLibrary.HistorialChat.MensajesDelUserReves">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.HistorialChat.BuscarUltimoComando(System.String)">
            <summary>
            Devueleve una lista que contiene los mensajes despues de el comando ingresado
            </summary>
            <param name="comando"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.HistorialChat.ComprobarUltimoComandoIngresado(System.String)">
            <summary>
            Chequeo para ver si su ultimo comando ingresado es el buscado en los handlers
            </summary>
            <param name="comando"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.HolaHandler">
            <summary>
            Esta clase contiene un método para aceptar una oferta.
            </summary>
        </member>
        <member name="M:ClassLibrary.HolaHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Este método se encarga de aceptar una oferta.
            </summary>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.HolaHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            
            </summary>
            <param name="mensaje"></param>
            <param name="respuesta"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.IHandler">
            <summary>
            Interfaz para implementar el patrón Chain of Responsibility. En ese patrón se pasa un mensaje a través de una
            cadena de "handlers" que pueden procesar o no el mensaje. Cada "handler" decide si procesa el mensaje, o si se lo
            pasa al siguiente. Esta interfaz define un atributo para definir el próximo "handler" y una una operación para
            recibir el mensaje y pasarlo al siguiente "handler" en caso que el mensaje no sea procesado. La responsabilidad de
            decidir si el mensaje se procesa o no, y de procesarlo, se realiza en las clases que implementan esta interfaz.
            </summary>
            <remarks>
            La interfaz se crea en función del principio de inversión de dependencias, para que los clientes de la cadena de
            responsabilidad, que pueden ser concretos, no dependan de una clase "handler" que potencialmente es abstracta.
            </remarks>
        </member>
        <member name="P:ClassLibrary.IHandler.Next">
            <summary>
            Obtiene el próximo "handler".
            </summary>
            <value>El "handler" que será invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="M:ClassLibrary.IHandler.Handle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente "handler" si existe.
            </summary>
            <param name="mensaje">El mensaje a procesar.</param>
            <param name="respuesta">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:ClassLibrary.IHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial y cancela el próximo "handler" si existe. Es utilizado para que los
            "handlers" que procesan varios mensajes cambiando de estado entre mensajes puedan volver al estado inicial en
            caso de error por ejemplo.
            </summary>
        </member>
        <member name="T:ClassLibrary.InteresadoEnOfertaHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:ClassLibrary.InteresadoEnOfertaHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase.
            Esta clase procesa el mensaje ingresado por el usuario.
            </summary>
            <param name="next">El próximo "handler"</param>
        </member>
        <member name="M:ClassLibrary.InteresadoEnOfertaHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Este método procesa el mensaje "!InteresadoEnOferta" y retorna true.
            En caso contrario retorna false.
            </summary>
            <param name="mensaje">Recibe por parametro el mensaje a procesar.</param>
            <param name="respuesta">Recibe por paramtro la respuesta al mensaje procesado.</param>
            <returns>Retorna true si se ha podido realizar la operación, o false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.InvitarEmpresaHandler">
            <summary>
            Un "handler" del patrón Chain of Responsability que implementa el comando "/InvitarEmpresa".
            </summary>
        </member>
        <member name="M:ClassLibrary.InvitarEmpresaHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase.
            Esta clase procesa los mensajes ingresador por el usuario, con el fin de invitar a una empresa a integrar el bot.
            </summary>
            <param name="next">Recibe por parametro el siguiente Handler.</param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.InvitarEmpresaHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Este método procesa el mensaje "Invitar Empresa" y retorna true.
            En caso contrario retorna false.
            </summary>
            <param name="mensaje">Recibe por parametro el mensaje a procesar.</param>
            <param name="respuesta">Recibe por paramtro la respuesta al mensaje procesado.</param>
            <returns>Retorna true si se ha podido realizar la operación, o false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.RegistrarAdminHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:ClassLibrary.RegistrarAdminHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            
            </summary>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.RegistrarAdminHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Este metodo procesa el mensaje "Registrar Admin", para registrar un administrador.
            </summary>
            <param name="mensaje">Recibe por parametro el mensaje a procesar.</param>
            <param name="respuesta">Recibe por paramtro la respuesta al mensaje procesado.</param>
            <returns>Retorna true si se ha podido realizar la operación, o false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.RegistroEmprendedorHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:ClassLibrary.RegistroEmprendedorHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase Esta clase procesa el mensaje "hola".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.RegistroEmprendedorHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje "Registrarse" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="mensaje">Recibe por parametro el mensaje a procesar.</param>
            <param name="respuesta">Recibe por paramtro la respuesta al mensaje procesado.</param>
            <returns>Retorna true si se ha podido realizar la operación, o false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.RemoverHabEmprendedor">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:ClassLibrary.RemoverHabEmprendedor.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase Esta clase procesa el mensaje "hola".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.RemoverHabEmprendedor.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje "Registrarse" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="mensaje">Recibe por parametro el mensaje a procesar.</param>
            <param name="respuesta">Recibe por paramtro la respuesta al mensaje procesado.</param>
            <returns>Retorna true si se ha podido realizar la operación, o false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.RemoveHabEmpresaHandler">
            <summary>
            Esta clase contiene un método para remover habilitaciones de empresas.
            </summary>
        </member>
        <member name="M:ClassLibrary.RemoveHabEmpresaHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase.
            </summary>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.RemoveHabEmpresaHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Se encarga de procesar el mensaje para determinar si se removerá una habilitación.
            </summary>
            <param name="mensaje">Recibe por parametro el mensaje a procesar.</param>
            <param name="respuesta">Recibe por paramtro la respuesta al mensaje procesado.</param>
            <returns>Retorna true si se ha podido realizar la operación, o false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.RemoverHabOfertaHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:ClassLibrary.RemoverHabOfertaHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase Esta clase procesa el mensaje "hola".
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.RemoverHabOfertaHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje "Registrarse" y retorna true; retorna false en caso contrario.
            </summary>
            <param name="mensaje">Recibe por parametro el mensaje a procesar.</param>
            <param name="respuesta">Recibe por paramtro la respuesta al mensaje procesado.</param>
            <returns>Retorna true si se ha podido realizar la operación, o false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.VerEmprendedorHandler">
            <summary>
            Un "handler" del patrón Chain of Responsability que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:ClassLibrary.VerEmprendedorHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase.
            Esta clase procesa el mensaje ingresado por el usuario.
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:ClassLibrary.VerEmprendedorHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Este método procesa el mensaje "/VerEmprendedor" y retorna true.
            En caso contrario retorna false.
            </summary>
            <param name="mensaje">Recibe por parametro el mensaje a procesar.</param>
            <param name="respuesta">Recibe por paramtro la respuesta al mensaje procesado.</param>
            <returns>Retorna true si se ha podido realizar la operación, o false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.VerEmpresaHandler">
            <summary>
            Un "handler" del patrón Chain of Responsability que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:ClassLibrary.VerEmpresaHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase.
            Esta clase procesa el mensaje ingresado por el usuario.
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:ClassLibrary.VerEmpresaHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Este método procesa el mensaje "!verempresa" y retorna true.
            En caso contrario retorna false.
            </summary>
            <param name="mensaje">Recibe por parametro el mensaje a procesar.</param>
            <param name="respuesta">Recibe por paramtro la respuesta al mensaje procesado.</param>
            <returns>Retorna true si se ha podido realizar la operación, o false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.VerInteresados">
            <summary>
            Un "handler" del patrón Chain of Responsability que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:ClassLibrary.VerInteresados.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase.
            Esta clase procesa el mensaje ingresado por el usuario.
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:ClassLibrary.VerInteresados.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Este método procesa el mensaje "!VerInteresados" y retorna true.
            En caso contrario retorna false.
            </summary>
            <param name="mensaje">Recibe por parametro el mensaje a procesar.</param>
            <param name="respuesta">Recibe por paramtro la respuesta al mensaje procesado.</param>
            <returns>Retorna true si se ha podido realizar la operación, o false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.VerMisOfertasHandler">
            <summary>
            Un "handler" del patrón Chain of Responsability que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:ClassLibrary.VerMisOfertasHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase.
            Esta clase procesa el mensaje ingresado por el usuario.
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:ClassLibrary.VerMisOfertasHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Este método procesa el mensaje "!verempresa" y retorna true.
            En caso contrario retorna false.
            </summary>
            <param name="mensaje">Recibe por parametro el mensaje a procesar.</param>
            <param name="respuesta">Recibe por paramtro la respuesta al mensaje procesado.</param>
            <returns>Retorna true si se ha podido realizar la operación, o false en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.IJsonConvertible">
            <summary>
            Define el tipo que tienen los objetos que pueden ser serializados en y deserializados desde texto en formato
            Json.
            </summary>
        </member>
        <member name="M:ClassLibrary.IJsonConvertible.ConvertToJson">
            <summary>
            Convierte el objeto a texto en formato Json. El objeto puede ser reconstruido a partir del texto en formato
            Json utilizando JsonSerializer.Deserialize.
            </summary>
            <returns>El objeto convertido a texto en formato Json.</returns>
        </member>
        <member name="T:ClassLibrary.IBuscador">
            <summary>
            Interfaz IBuscador que define el metodo a implementar por las clases de busqueda.
            </summary>
            <remarks>
            Mediante el uso de ésta interfaz, se puede incluir el comportamiento de varias fuentes en una clase.
            Por ejemplo, la impletentación que realizan las clases BuscadorMaterial, BuscadorTags y BuscadorUbicacion.
            </remarks>
        </member>
        <member name="M:ClassLibrary.IBuscador.Buscar(ClassLibrary.Publicaciones,System.String)">
            <summary>
            Este método se encaga de buscar dentro de Publicaciones.
            </summary>
            <param name="publicaciones">Recibe parametro del tipo Publicaciones.</param>
            <param name="busqueda">Recibe parametro del tipo string.</param>
            <returns>Retorna una oferta.</returns>
        </member>
        <member name="T:ClassLibrary.IHabilitaciones">
            <summary>
            Esta interface contiene los métodos para agregar, quitar o consultar habilitaciones.
            </summary>
            <remarks>
            Mediante el uso de esta interfaz, se puede incluir el comportamiento de varias fuentes en una clase.
            Por ejemplo, la implementacion que realizan las clases Emprendedor, Empresa y Ofertas.
            </remarks>
        </member>
        <member name="M:ClassLibrary.IHabilitaciones.AddHabilitacion(System.String)">
            <summary>
            Este método se implementará para agregar habilitaciones a las diferentes clases que lo requieran.
            </summary>
            <param name="habilitacionBuscada">Recibe un string del nombre de la habilitación que se desea agregar.</param>
        </member>
        <member name="M:ClassLibrary.IHabilitaciones.RemoveHabilitacion(System.String)">
            <summary>
            Este método se implementará para eliminar habilitaciones de las diferentes clases.
            </summary>
            <param name="habilitacion">Recibe un string con el nombre de la habilitacion que se quiere eliminar.</param>
        </member>
        <member name="M:ClassLibrary.IHabilitaciones.GetListaHabilitaciones">
            <summary>
            Este método se implementará para obtener la en texto la lista de habilitaciones de las clases.
            </summary>
        </member>
        <member name="T:ClassLibrary.IMensaje">
            <summary>
            Esta interfaz contiene los datos requerido para los envios de mensajes.
            Mediante el uso de esta interfaz, se puede incluir el comportamiento de varias fuentes en una clase.
            </summary>
        </member>
        <member name="P:ClassLibrary.IMensaje.Id">
            <summary>
            Esta property contiene la identificacion unica del Usuario, que interactua en la app.
            </summary>
            <value>El valor esta dado por el token asignado por Telegram.</value>
        </member>
        <member name="P:ClassLibrary.IMensaje.Text">
            <summary>
            Esta property contiene el mensaje ingresado pro el Usuario.
            </summary>
            <value>El valor esta dado por una cadena de caracteres ingresador por el Usuario.</value>
        </member>
        <member name="T:ClassLibrary.IPrinter">
            <summary>
            Esta interfaz contiene un método para imprimir.
            </summary>
            <remarks>
            En este caso se aplicó SRP para poder imprimir las ofertas sin tener que modificarlas a ellas.
            Mediante el uso de esta interfaz, se puede incluir el comportamiento de varias fuentes en una clase.
            </remarks>
        </member>
        <member name="M:ClassLibrary.IPrinter.OfertaPrinter(ClassLibrary.Oferta)">
            <summary>
            Este método hace un print de la oferta.
            </summary>
            <param name="oferta">Oferta.</param>
        </member>
        <member name="T:ClassLibrary.ITelegram">
            <summary>
            Esta interface sirve para interactuar con la Aplicación de Telegram.
            </summary>
            /// <remarks>
            Mediante el uso de esta interfaz, se puede incluir el comportamiento de varias fuentes en una clase.
            </remarks>
        </member>
        <member name="M:ClassLibrary.ITelegram.SendMessage">
            <summary>
            Este método permite enviar mensajes.
            </summary>
        </member>
        <member name="M:ClassLibrary.ITelegram.RecibeMessage">
            <summary>
            Este método permite recibir mensajes.
            </summary>
        </member>
        <member name="T:ClassLibrary.LimpiadorCadenas">
            <summary>
            Esta clase representa un limpiador de cadenas para permitir leer las cadenas correctamente.
            </summary>
        </member>
        <member name="M:ClassLibrary.LimpiadorCadenas.LimpiaCadena(System.String)">
            <summary>
            Este método sirve para limpiar las cadenas y permitir que no hayan errores de escritura, y se pueda leer el texto que sea ingresado por un usuario de la aplicación.
            </summary>
            <param name="cadena">Recibe por parametro un cadena de tipo String.</param>
            <returns>Retorna la cadena una vez que se le aplicaron todos los limpiadores de cadena.</returns>
        </member>
        <member name="M:ClassLibrary.LimpiadorCadenas.LimpiaCadenaRespuesta(System.String)">
            <summary>
            Este método sirve para limpiar las cadenas de respuestas que el usuario ingresará.
            Creemos necesario tener un limpiador de cadenas así, ya que el usuario podria digitar el texto de cualquier forma, con mayusculas, minusculas o combinaciones de ambas.
            </summary>
            <param name="respuesta">Recibe como parametro una cadena de caracteres de tipo String.</param>
            <returns>Devuelve la cadena pero con las modificaciones realizadas.</returns>
        </member>
        <member name="T:ClassLibrary.Logica">
            <summary>
            Esta clase se encarga de crear y guardar instancias de Publicaciones, BuscadorUbicacion, BuscadorTags, BuscadorMaterial y ConsolePrinter.
            </summary>
            <remarks>La creación de clases y la asignación de responsabilidades se hizo en base en un patron GRASP: Low Coupling and High Cohesion,
            buscando mantener un equilibrio entre cohesión y acoplamiento.
            </remarks>
        </member>
        <member name="F:ClassLibrary.Logica.Publicaciones">
            <summary>
            Guarda una instancia de Publicaciones.
            </summary>
        </member>
        <member name="F:ClassLibrary.Logica.BuscadorUbicacion">
            <summary>
            Guarda una instancia de BuscadorUbicacion.
            </summary>
        </member>
        <member name="F:ClassLibrary.Logica.BuscadorTags">
            <summary>
            Guarda una instancia de BuscadorTags.
            </summary>
        </member>
        <member name="F:ClassLibrary.Logica.BuscadorMaterial">
            <summary>
            Guarda una instancia de BuscadorMat.
            </summary>
        </member>
        <member name="F:ClassLibrary.Logica.PrinterConsola">
            <summary>
            Guarda una instancia de ConsolePrinter.
            </summary>
        </member>
        <member name="F:ClassLibrary.Logica.ListaNombreOfertas">
            <summary>
            Guarda strings con los nombres de oferta para que no se repitan.
            </summary>
            <returns></returns>
        </member>
        <member name="F:ClassLibrary.Logica.Habilitaciones">
            <summary>
            Guarda una instancia de Habilitaciones.
            </summary>
            <returns></returns>
        </member>
        <member name="F:ClassLibrary.Logica.Emprendedores">
            <summary>
            Guarda un conjunto Emprendedor, y su chat id.
            </summary>
            <returns></returns>
        </member>
        <member name="F:ClassLibrary.Logica.Empresas">
            <summary>
            Guarda un conjunto Empresa, y su chat id.
            </summary>
            <returns></returns>
        </member>
        <member name="F:ClassLibrary.Logica.HistorialDeChats">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:ClassLibrary.Logica.EmpresasInvitadas">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:ClassLibrary.Logica.Administradores">
            <summary>
            Guarda un conjunto Administrador, y su chat id.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.LogicaAdministrador">
            <summary>
            Esta clase se encarga de la lógica relacionada con el Administrador.
            </summary>
        </member>
        <member name="M:ClassLibrary.LogicaAdministrador.RegistroAdministrador(System.String,System.String,System.String)">
            <summary>
            Este método sirve para registrar al administrador en el bot.
            Por defecto la clave para registrarse iniciamente es "equipo_16", debe verificar para poder registrarse.
            </summary>
            <param name="nombre">Recibe el nombre del Administrador como un string.</param>
            <param name="clave">Recibe una clave de acceso que es suministrada al Admin.</param>
            <param name="id">Recibe el id del Admin.</param>
        </member>
        <member name="M:ClassLibrary.LogicaAdministrador.InvitarEmpresa(ClassLibrary.Administrador,System.String)">
            <summary>
            Invita a la empresa a unirse en el bot.
            </summary>
        </member>
        <member name="M:ClassLibrary.LogicaAdministrador.CambioClave(ClassLibrary.Administrador,System.String,System.String)">
            <summary>
            Implementa los cambios de claves del Administrador.
            Inicialmente se le recomienda al Administrador cambiar su clave cuando se registra.
            </summary>
            <param name="administrador">Recibe por parametro el Administrador de referencia</param>
            <param name="nuevaClave">Recibe por parametro la nueva pass.</param>
            <param name="clave">Recibe por parametro la pass antigua.</param>
        </member>
        <member name="T:ClassLibrary.LogicaBuscadores">
            <summary>
            Esta clase contiene a los buscadores.
            </summary>
            <remarks>La creción de clases y la asignación de responsabilidades se hizo en base en un patron GRASP: Low Coupling and High Cohesion,
            buscando mantener un equilibrio entre cohesión y acoplamiento.
            </remarks>
        </member>
        <member name="M:ClassLibrary.LogicaBuscadores.BuscarPorMaterial(System.String)">
            <summary>
            Llama al método Buscar para realizar una búsqueda por Material.
            </summary>
            <param name="busqueda">Palabra clave para buscar.</param>
            <returns>Retorna las publicaciones que coinciden con el Material especificado.</returns>
        </member>
        <member name="M:ClassLibrary.LogicaBuscadores.BuscarPorTags(System.String)">
            <summary>
            Llama al método Buscar para realizar una búsqueda por Tags.
            </summary>
            <param name="busqueda">Palabra clave para buscar.</param>
            <returns>Retorna las ofertas encontradas.</returns>
            <returns>Retorna las publicaciones que coinciden con el Tag especificado.</returns>
        </member>
        <member name="M:ClassLibrary.LogicaBuscadores.BuscarPorUbicacion(System.String)">
            <summary>
            Llama al método Buscar para realizar una búsqueda por Ubicación.
            </summary>
            <param name="busqueda">Palabra clave para buscar.</param>
            <returns>Retorna las publicaciones que coinciden con la Ubicación especificada.</returns>
        </member>
        <member name="T:ClassLibrary.LogicaEmprendedor">
            <summary>
            Esta clase contiene la lógica del emprendedor.
            </summary>
            <remarks>
            Contiene un método para llamar a cada método de la clase Emprendedor.
            La creción de clases y la asignación de responsabilidades se hizo en base en un patron GRASP: Low Coupling and High Cohesion,
            buscando mantener un equilibrio entre cohesión y acoplamiento.
            </remarks>
        </member>
        <member name="M:ClassLibrary.LogicaEmprendedor.RegistroEmprendedor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Registro de usuario para ser emprendedor.
            </summary>
            <param name="nombre">Nombre del emprendedor.</param>
            <param name="ubicacion">Ubicacion del emprendedor.</param>
            <param name="rubro">Rubro del emprendedor.</param>
            <param name="especializaciones">Especializaciones del emprendedor.</param>
            <param name="id">Id del chat.</param>
        </member>
        <member name="M:ClassLibrary.LogicaEmprendedor.AddHabilitacion(ClassLibrary.Emprendedor,System.String)">
            <summary>
            Este método se encarga de llamar a AddHabilitación de Emprendedor.
            </summary>
            <param name="emprendedor">Un emprendedor.</param>
            <param name="habilitacionBuscada">Nombre de la habilitación a agregar.</param>
        </member>
        <member name="M:ClassLibrary.LogicaEmprendedor.RemoveHabilitacion(ClassLibrary.Emprendedor,System.String)">
            <summary>
            Este método se encarga de llamar a RemoveHabilitación de Emprendedor.
            </summary>
            <param name="emprendedor">Un emprendedor.</param>
            <param name="habilitacion">Nombre de la habilitación a remover.</param>
        </member>
        <member name="M:ClassLibrary.LogicaEmprendedor.GetHabilitacionList(ClassLibrary.Emprendedor)">
            <summary>
            Este método llama a GetHabilitacionList de Emprendedor.
            </summary>
            <param name="emprendedor">Un emprendedor.</param>
        </member>
        <member name="M:ClassLibrary.LogicaEmprendedor.InteresadoEnOferta(ClassLibrary.Emprendedor,System.String)">
            <summary>
            Este método llama a InteresadoEnOferta de Emprendedor.
            </summary>
            <param name="emprendedor">Un emprendedor.</param>
            <param name="nombreOferta">Una oferta.</param>
        </member>
        <member name="M:ClassLibrary.LogicaEmprendedor.CalcularOfertasCompradas(ClassLibrary.Emprendedor,System.String,System.String)">
            <summary>
            Este método llama a CalcularOfertasCompradas de Emprendedor.
            </summary>
            <param name="emprendedor">Un emprendedor.</param>
            <param name="fechaInicio">Fecha de inicio.</param>
            <param name="fechaFinal">Fecha de final.</param>
            <returns>Retorna las ofertas compradas dentro del período de tiempo especificado.</returns>
        </member>
        <member name="M:ClassLibrary.LogicaEmprendedor.VerEmprendedor(ClassLibrary.Emprendedor)">
            <summary>
            Este método permite crear una ficha del emprendedor en texto, para poder obtener sus datos.
            </summary>
            <param name="emprendedor">Recibe por parametro un objeto de tipo Emprendedor.</param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.LogicaEmpresa">
            <summary>
            Esta clase se encarga de la lógica relacionada a Empresa.
            </summary>
            <remarks>La creción de clases y la asignación de responsabilidades se hizo en base en un patron GRASP: Low Coupling and High Cohesion,
            buscando mantener un equilibrio entre cohesión y acoplamiento.
            </remarks>
        </member>
        <member name="M:ClassLibrary.LogicaEmpresa.AceptarInvitacion(ClassLibrary.Empresa,System.String)">
            <summary>
            Acepta la invitación del administrador.
            </summary>
            <param name="empresa">Empresa.</param>
            <param name="nombreEmpresa">Nombre de la Empresa.</param>
        </member>
        <member name="M:ClassLibrary.LogicaEmpresa.CrearOferta(ClassLibrary.Empresa,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Llama al método CrearProducto en empresa con los parametros pasados.
            </summary>
            <param name="empresa">Empresa que creará la oferta.</param>
            <param name="nombre">Nombre de la oferta.</param>
            <param name="material">Material de lo que se ofrece.</param>
            <param name="precio">Precio de la oferta.</param>
            <param name="unidad">Unidad tipo (Kg, g, ml, o unidad normal).</param>
            <param name="tags">Palabra clave.</param>
            <param name="ubicacion">Ubicacion dónde se encuentra la oferta.</param>
            <param name="constantesPuntuales">Si la oferta es constante o puntual.</param>
        </member>
        <member name="M:ClassLibrary.LogicaEmpresa.EliminarOferta(ClassLibrary.Empresa,System.String)">
            <summary>
            Llama al método EliminarProducto en empresa con los parametros pasados.
            </summary>
            <param name="empresa">Empresa que eliminará la oferta.</param>
            <param name="nombre">Nombre de la oferta que se desea eliminar.</param>
        </member>
        <member name="M:ClassLibrary.LogicaEmpresa.AceptarOferta(ClassLibrary.Empresa,System.String)">
            <summary>
            Llama al método AceptarOferta en empresa con los parametros pasados.
            </summary>
            <param name="empresa">Empresa que aceptará la oferta.</param>
            <param name="ofertaQueSeAcepta">Nombre de oferta que se desea Aceptar.</param>
        </member>
        <member name="M:ClassLibrary.LogicaEmpresa.CalcularOfertasVendidas(ClassLibrary.Empresa,System.String,System.String)">
            <summary>
            Llama al método CalcularOfertasVendidasSegunTiempo en empresa con los parametros pasados.
            </summary>
            <param name="empresa">Empresa que quiere calcular sus ofertas vendidas segun x tiempo.</param>
            <param name="fechaInicio">Fecha inicio, se debe pasar fecha con formato AAAA-MM-DD.</param>
            <param name="fechaFinal">Fecha final, se debe pasar fecha con formato AAAA-MM-DD.</param>
            <returns>Retorna las ofertas vendidas dentro del período de tiempo especificado.</returns>
        </member>
        <member name="M:ClassLibrary.LogicaEmpresa.AddHabilitacion(ClassLibrary.Empresa,System.String)">
            <summary>
            Llama al método AddHabilitacion en empresa con los parametros pasados.
            </summary>
            <param name="empresa">Empresa a la que se desea agregar una habilitación.</param>
            <param name="habilitacionBuscada">Habilitacion para ser agregada.</param>
        </member>
        <member name="M:ClassLibrary.LogicaEmpresa.RemoveHabilitacion(ClassLibrary.Empresa,System.String)">
            <summary>
            Llama al método RemoveHabilitacion en empresa con los parametros pasados.
            </summary>
            <param name="empresa">Empresa a la que se desea remover una habilitación.</param>
            <param name="habilitacion">Habilitacion para ser removida.</param>
        </member>
        <member name="M:ClassLibrary.LogicaEmpresa.AddHabilitacionOferta(ClassLibrary.Empresa,System.String,System.String)">
            <summary>
            Metodo AddHabilitacionOferta de las ofertas de la empresa.
            </summary>
            <param name="empresa">empresa</param>
            <param name="habilitacion">habilitacion a agregar</param>
            <param name="nombreOferta">nombre de la oferta</param>
        </member>
        <member name="M:ClassLibrary.LogicaEmpresa.RemoveHabilitacionOferta(ClassLibrary.Empresa,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="empresa"></param>
            <param name="habilitacion"></param>
            <param name="nombreOferta"></param>
        </member>
        <member name="M:ClassLibrary.LogicaEmpresa.GetListaHabilitaciones(ClassLibrary.Empresa)">
            <summary>
            Llama al método GetHabilitacion en empresa con los parametros pasados.
            </summary>
            <param name="empresa">Empresa.</param>
        </member>
        <member name="M:ClassLibrary.LogicaEmpresa.VerInteresados(ClassLibrary.Empresa)">
            <summary>
            
            </summary>
            <param name="empresa"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.LogicaEmpresa.VerEmpresa(ClassLibrary.Empresa)">
            <summary>
            Método que devuelve todos los atributos de la empresa.
            </summary>
            <param name="empresa"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.LogicaEmpresa.VerMisOfertas(ClassLibrary.Empresa)">
            <summary>
            Método que devuelve las ofertas publicadas por la empresa.
            </summary>
            <param name="empresa"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.Oferta">
            <summary>
            Esta clase representa una oferta.
            Esta clase que contiene habilitaciones requiere, que se implemente la interfaz IHabilitaciones.
            La implementación de la interfaz es necesaria para unificar el nombre de su método con otras clases que tiene similares caracteristicas.
            </summary>
        </member>
        <member name="F:ClassLibrary.Oferta.HabilitacionesOferta">
            <summary>
            Esta lista contiene las habilitaciones de las Ofertas.
            </summary>
        </member>
        <member name="M:ClassLibrary.Oferta.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,ClassLibrary.Empresa)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.Oferta"/>.
            </summary>
            <param name="nombre">Nombre de la oferta.</param>
            <param name="material">Material del producto que se oferta.</param>
            <param name="precio">Precio de la oferta.</param>
            <param name="unidad">Unidad ed la oferta.</param>
            <param name="tags">Tags de la oferta.</param>
            <param name="ubicacion">Ubicacion de la oferta.</param>
            <param name="empresa">Empresa que publica la oferta.</param>
            <param name="constantesPuntuales">Si la oferta es constante o puntual.</param>
        </member>
        <member name="F:ClassLibrary.Oferta.Interesado">
            <summary>
            Nombre del interesado en la oferta.
            </summary>
        </member>
        <member name="P:ClassLibrary.Oferta.Nombre">
            <summary>
            Obtiene o establece el nombre de la oferta.
            </summary>
        </member>
        <member name="P:ClassLibrary.Oferta.Material">
            <summary>
            Obtiene o establece el Material del producto a ofertar.
            </summary>
        </member>
        <member name="P:ClassLibrary.Oferta.Precio">
            <summary>
            Obtiene o establece el Precio de la Oferta.
            </summary>
        </member>
        <member name="P:ClassLibrary.Oferta.Unidad">
            <summary>
            Obtiene o establece la Cantidad de unidades a ofertar.
            </summary>
        </member>
        <member name="P:ClassLibrary.Oferta.Tags">
            <summary>
            Obtiene o establece los Tags de la Oferta.
            </summary>
        </member>
        <member name="P:ClassLibrary.Oferta.Ubicacion">
            <summary>
            Obtiene o establece la Ubicación de la oferta.
            </summary>
        </member>
        <member name="P:ClassLibrary.Oferta.Id">
            <summary>
            Obtiene la ID única para cada Oferta.
            </summary>
        </member>
        <member name="P:ClassLibrary.Oferta.EmpresaCreadora">
            <summary>
            Obtiene o establece la Empresa que publica la Oferta.
            </summary>
        </member>
        <member name="P:ClassLibrary.Oferta.ConstantesPuntuales">
            <summary>
            Obtiene o establece un valor que indica si la Oferta es constante o puntual.
            </summary>
        </member>
        <member name="P:ClassLibrary.Oferta.HabilitacionesDeOferta">
            <summary>
            Obtiene una lista de Habilitaciones de la Oferta.
            </summary>
            <value>habilitacionesOferta.</value>
        </member>
        <member name="M:ClassLibrary.Oferta.AddHabilitacion(System.String)">
            <summary>
            Añade una habilitación a la oferta.
            </summary>
            <param name="habilitacionBuscada">Nombre de la habilitación a agregar.</param>
        </member>
        <member name="M:ClassLibrary.Oferta.RemoveHabilitacion(System.String)">
            <summary>
            Quita una habilitación a la oferta.
            </summary>
            <param name="habilitacion">Habilitacion a quitar.</param>
        </member>
        <member name="M:ClassLibrary.Oferta.GetListaHabilitaciones">
            <summary>
            Muestra todas las habilitaciones posibles para agregar.
            </summary>
        </member>
        <member name="P:ClassLibrary.Oferta.FechaDePublicacion">
            <summary>
            Obtiene la Fecha en la que se publicó la oferta.
            </summary>
        </member>
        <member name="M:ClassLibrary.Oferta.TextoOferta">
            <summary>
            Agregado por SRP y Expert, la responsabilidad de construir el texto, le corresponde a la clase oferta.
            ya que conoce lo necesario.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Oferta.TextoInteresados">
            <summary>
            Agregado por SRP y Expert, la responsabilidad de construir el texto, le corresponde a la clase oferta.
            ya que conoce lo necesario.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.OpcionesUso">
            <summary>
            Esta clase contiene los métodos para poder hacer más fácil la tarea de que el usuario ingrese un comando para poder operar en el bot.
            Se utilizan métodos estaticos porque no se requiere una instanciación de la clase para utilizarlos.
            </summary>
        </member>
        <member name="M:ClassLibrary.OpcionesUso.AccionesEmprendedor">
            <summary>
            Este método contiene todas las instrucciones que un emprendedor puede llegar a realizar.
            </summary>
            <returns>Retorna un string con cada comando.</returns>
        </member>
        <member name="M:ClassLibrary.OpcionesUso.AccionesEmpresas">
            <summary>
            Este método contiene todas las instrucciones que una empresa puede llegar a utilizar.
            </summary>
            <returns>Retorna un string con cada comando.</returns>
        </member>
        <member name="M:ClassLibrary.OpcionesUso.AccionesAdministradores">
            <summary>
            Este método contiene todas las instrucciones que un Administrador puede llegar a utilizar.
            </summary>
            <returns>Retorna un string con cada comando.</returns>
        </member>
        <member name="T:ClassLibrary.Publicaciones">
            <summary>
            Esta clase se encarga de las Publicaciones.
            </summary>
            /// <remarks>
            Para esta clase se utilizó el patron de diseño de Expert, ya que desde nuestro punto de vista,
            la clase Publicaciones tiene metodos que sean exclusivos de su clase ya que es la que se encarga de conocer 
            todo lo necesario para hacer posible la ejecución de sus métodos, y que no sean necesarios para el resto de clases.
            </remarks>
        </member>
        <member name="P:ClassLibrary.Publicaciones.Instance">
            <summary>
            Obtiene una instancia de Publicaciones.
            </summary>
        </member>
        <member name="F:ClassLibrary.Publicaciones.OfertasPublicados">
            <summary>
            Una lista que contiene las ofertas.
            </summary>
        </member>
        <member name="M:ClassLibrary.Publicaciones.GetOfertasPublicados">
            <summary>
            Este método imprime las ofertas contenidas en OfertasPublicados.
            </summary>
        </member>
        <member name="T:ClassLibrary.Rubro">
            <summary>
            Clase publica Rubro, para que puedan acceder a sus atributos y metodos.
            </summary>
            <remarks>
            Para esta clase se utilizó el patron de diseño de Expert, ya que desde nuestro punto de vista,
            la clase Rubro tiene metodos que sean exclusivos de su clase ya que es la que se encarga de conocer 
            todo lo necesario para hacer posible la ejecución de sus métodos, y que no sean necesarios para el resto de clases.
            </remarks>
        </member>
        <member name="M:ClassLibrary.Rubro.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.Rubro"/>.
            </summary>
        </member>
        <member name="M:ClassLibrary.Rubro.GetRubros">
            <summary>
            Obtiene lista de rubros. Se usa SRP y Expert ya que conoce todo lo necesario para llevar a cabo esta responsabilidad.
            </summary>
        </member>
        <member name="M:ClassLibrary.Rubro.CheckRubro(System.String)">
            <summary>
            Chequea si un rubro existe en la lista. Se usa SRP y Expert ya que conoce todo lo necesario para llevar a cabo esta responsabilidad.
            </summary>
            <param name="rubro">Rubro.</param>
            <returns><c>True</c> si existe el rubro en la lista, <c>False</c> si no existe.</returns>
        </member>
        <member name="T:ClassLibrary.TelegramMsgAdapter">
            <summary>
            La clase que encapsula el mensaje que recibe
            </summary>
        </member>
        <member name="F:ClassLibrary.TelegramMsgAdapter.mensaje">
            <summary>
            
            </summary>
        </member>
        <member name="M:ClassLibrary.TelegramMsgAdapter.#ctor(Telegram.Bot.Types.Message)">
            <summary>
            Inicializa una instancia de la clase TelegramMsgAdapter
            </summary>
            <param name="msg">Recibe un tipo Message de Telegram</param>
        </member>
        <member name="P:ClassLibrary.TelegramMsgAdapter.Id">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.TelegramMsgAdapter.Text">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:ClassLibrary.TelegramPrinter">
            <summary>
            Esta clase se encarga de imprimir por consola los atributos de oferta.
            </summary>
            <remarks>
            En este caso se aplicó SRP para poder imprimir las ofertas sin tener que modificarlas a ellas.
            </remarks>
        </member>
        <member name="M:ClassLibrary.TelegramPrinter.OfertaPrinter(ClassLibrary.Oferta)">
            <summary>
            Este método imprime por consola los atributos de oferta.
            </summary>
            <param name="oferta">Una oferta.</param>
        </member>
        <member name="M:ClassLibrary.TelegramPrinter.BusquedaPrinter(System.Collections.Generic.List{ClassLibrary.Oferta})">
            <summary>
            Este método imprime una string con información.
            </summary>
            <param name="resultadoBusqueda"></param>
        </member>
        <member name="T:ClassLibrary.Usuario">
            <summary>
            Creada clase Usuario de forma publica para que se pueda acceder desde cualquier parte del programa.
            </summary>
            <remarks>
            Creamos la clase Usuario con el fin de que la misma pueda ser usada en la reutilización del código en el programa.
            
            </remarks>
        </member>
        <member name="M:ClassLibrary.Usuario.#ctor(System.String,System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.Usuario"/>.
            </summary>
            <param name="nombre">Recibe un parametro de tipo string con el valor de "nombre".</param>
            <param name="ubicacion">Recibe un parametro de tipo string con el valor de "ubicacion".</param>
            <param name="rubro">Recibe un parametro de tipo Rubro con el valor de "rubro".</param>
        </member>
        <member name="P:ClassLibrary.Usuario.Nombre">
            <summary>
            Obtiene o establece un valor que indica el nombre del usuario.
            </summary>
            <value>Tipo string.</value>
        </member>
        <member name="P:ClassLibrary.Usuario.Ubicacion">
            <summary>
            Obtiene o establece el valor que indica la ubicación del usuario.
            </summary>
            <value>Tipo string.</value>
        </member>
        <member name="P:ClassLibrary.Usuario.Rubro">
            <summary>
            Obtiene o establece el valor con el rubro del usuario.
            </summary>
            <value>Tipo Rubro.</value>
        </member>
    </members>
</doc>
