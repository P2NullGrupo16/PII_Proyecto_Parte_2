<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:ClassLibrary.Administrador">
            <summary>
            Esta clase representa al Administrador, persona que invitara a las empresas a ingresar a la aplicación
            </summary>
        </member>
        <member name="M:ClassLibrary.Administrador.#ctor(System.String)">
            <summary>
            Inicializa una instancia de Administrador
            </summary>
            <param name="nombre">Recibe por parametro un string de nombre</param>
        </member>
        <member name="P:ClassLibrary.Administrador.Nombre">
            <summary>
            Obtiene un valor que le da el nombre al administrador
            </summary>
            <value>El valor del nombre es de tipo string</value>
        </member>
        <member name="F:ClassLibrary.Administrador.Empresas">
            <summary>
            Esta lista contiene las empresas que el Administrador a invitado a unirse a la aplicación
            </summary>
            <returns>Retorna la lista de empresas que contiene</returns>
        </member>
        <member name="M:ClassLibrary.Administrador.InvitarEmpresa(ClassLibrary.Empresa)">
            <summary>
            Este método permite invitar una empresa a unirse a la aplicación
            </summary>
            <param name="empresa">Recibe un objeto de tipo empresa como parametro</param>
        </member>
        <member name="T:ClassLibrary.BuscadorTags">
            <summary>
            Clase buscador por tag, que implementa la interfaz IBuscador.
            </summary>
        </member>
        <member name="M:ClassLibrary.BuscadorTags.Buscar(ClassLibrary.Publicaciones,System.String)">
            <summary>
            Busca ofertas en Publicaciones, según los tags de la oferta.
            </summary>
            <param name="publicaciones">Recibe un parametro de tipo Publicaciones con el nombre de "publicaciones"</param>
            <param name="busqueda">Recibe un parametro de tipo string con el nombre de "busqueda"</param>
            <returns>Retorna las ofertas encontradas por tag, mediante una lista de tipo Oferta</returns>
        </member>
        <member name="T:ClassLibrary.BuscadorUbicacion">
            <summary>
            Se encarga de buscar ofertas segun la ubicación de la misma, implementa IBuscador.
            </summary>
        </member>
        <member name="M:ClassLibrary.BuscadorUbicacion.Buscar(ClassLibrary.Publicaciones,System.String)">
            <summary>
            Busca ofertas en las publicaciones, según la ubicación de la oferta.
            </summary>
            <param name="publicaciones">Publicaciones</param>
            <param name="busqueda">Lo que se va a buscar</param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.Empresa">
            <summary>
            Esta clase representa una Empresa, que se encarga de crear Ofertas, eliminarlas, aceptarlas y calcular el consumo de ofertas.
            </summary>
        </member>
        <member name="M:ClassLibrary.Empresa.#ctor(System.String,System.String,ClassLibrary.Rubro,ClassLibrary.Habilitaciones)">
            <summary>
            Inicializa una instancia de Empresa
            </summary>
            <param name="nombre">Nombre de la empresa</param>
            <param name="ubicacion">Ubicación de la empresa</param>
            <param name="rubro">Rubro de la empresa</param>
            <param name="habilitacion">Habilitaciones de la empresa</param>
            <returns></returns>
        </member>
        <member name="P:ClassLibrary.Empresa.HabilitacionesEmpresa">
            <summary>
            Obtine una lista que indica las habiltiaciones que tiene la Empresa
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Empresa.AceptarInvitacion">
            <summary>
            Acepta la invitación del Administrador
            </summary>
        </member>
        <member name="M:ClassLibrary.Empresa.CrearProducto(ClassLibrary.Publicaciones,System.String,System.String,System.Int32,System.String,System.String,System.String,System.Guid)">
            <summary>
            Crea un producto, se usa Creator, agrega objetos de Oferta, además de guardar instancias de Oferta en las listas ofertasAceptadas, interesadosEnOfertas.
            </summary>
            <param name="publicaciones">Publicaciones</param>
            <param name="nombre">Nombre de la oferta</param>
            <param name="material">Material de la oferta</param>
            <param name="precio">Precio de la oferta</param>
            <param name="unidad">Unidad de la oferta</param>
            <param name="tags">Tags de la oferta (palabras claves)</param>
            <param name="ubicacion">Ubicación donde se en cuentra el producto que se ofrece</param>
            <param name="id">Id de la oferta</param>
        </member>
        <member name="M:ClassLibrary.Empresa.EliminarProducto(ClassLibrary.Oferta,ClassLibrary.Publicaciones)">
            <summary>
            Elimina una oferta creada de las publicaciones
            </summary>
            <param name="oferta">Oferta a eliminar</param>
            <param name="publicaciones">Publicaciones</param>
        </member>
        <member name="M:ClassLibrary.Empresa.AceptarOferta(ClassLibrary.Oferta,ClassLibrary.Publicaciones)">
            <summary>
            Quita de las publicaciones, la oferta que fue aceptada, ser aceptada implica que se llegó a un acuerdo
            con un emprendedor y se quiere quitar la oferta de las publicaciones, además de agregarla a la lista
            de ofertasAceptadas que contiene la empresa, para realizar un control de cuantas se aceptan.
            </summary>
            <param name="oferta">Oferta que se quiere aceptar</param>
            <param name="publicaciones">Publicaciones</param>
        </member>
        <member name="M:ClassLibrary.Empresa.calcularOfertasVendidasSegunTiempo(System.DateTime,System.DateTime)">
            <summary>
            Calcula cuantas ofertas se entregaron entre diferentes fechas
            </summary>
            <param name="fechaInicio">Fecha inicio</param>
            <param name="fechaFinal">Fecha final</param>
        </member>
        <member name="M:ClassLibrary.Empresa.AddHabilitacion(System.String)">
            <summary>
            Agerga habilitaciones que pueda tener la empresa
            </summary>
            <param name="habilitacionBuscada">Habilitación a buscar</param>
        </member>
        <member name="M:ClassLibrary.Empresa.RemoveHabilitacion(System.String)">
            <summary>
            Quita habilitaciones que tenga la Empresa
            </summary>
            <param name="habilitacion">Habilitacion a eliminar</param>
        </member>
        <member name="M:ClassLibrary.Empresa.GetHabilitacionList">
            <summary>
            Muestra todas las habilitaicones posibles para agregar
            </summary>
        </member>
        <member name="T:ClassLibrary.Habilitaciones">
            <summary>
            Esta clase representa las habilitaciones existentes
            </summary>
        </member>
        <member name="F:ClassLibrary.Habilitaciones.ListaHabilitaciones">
            <summary>
            Esta lista contiene un conjunto de habilitaciones predeterminadas
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Habilitaciones.#ctor(System.String)">
            <summary>
            Inicializa una instancia de habilitaciones
            </summary>
        </member>
        <member name="P:ClassLibrary.Habilitaciones.Nombre">
            <summary>
            Este valor indica el nombre de la habilitación
            </summary>
            <value>Valor es un string del nombre</value>
        </member>
        <member name="M:ClassLibrary.Habilitaciones.HabilitacionesDisponibles">
            <summary>
            Este método permite ver graficamente cuales son las habilitaciones disponibles
            Para poder ver cuales son las habilitaciones utiliza un StringBuilder para poder obtener un string al final
            </summary>
        </member>
        <member name="M:ClassLibrary.Habilitaciones.AddHabilitacion(System.String)">
            <summary>
            Este método permite agregar habilitaciones a la lista de habilitaciones
            </summary>
            <param name="nombre"> Recibe un parametro de tipo string del nombre de la habilitación deseada</param>
        </member>
        <member name="M:ClassLibrary.Habilitaciones.GetHabilitacionList">
            <summary>
            Este método imprime en consola la lista de habilitaciones
            para realizar esto utiliza un StringBuilder y recorre la lista de Hablilitaciones
            </summary>
        </member>
        <member name="M:ClassLibrary.Habilitaciones.RemoveHabilitacion(System.String)">
            <summary>
            Este método sirve para eliminar habilitaciones que estan en la lista de Habilitaciones
            </summary>
            <param name="nombre">Recibe por parametro un string del nombre de la habilitación deseada</param>
        </member>
        <member name="T:ClassLibrary.IBuscador">
            <summary>
            Interfaz IBuscador que define el metodo a implementar por las clases de busqueda
            </summary>
        </member>
        <member name="M:ClassLibrary.IBuscador.Buscar(ClassLibrary.Publicaciones,System.String)">
            <summary>
            Interfaz IBuscador
            </summary>
            <param name="publicaciones">Recibe parametro del tipo Publicaciones </param>
            <param name="busqueda"> Recibe parametro del tipo string </param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.IHabilitaciones">
            <summary>
            Esta interface contiene los métodos para agregar, quitar o consultar habilitaciones
            </summary>
        </member>
        <member name="M:ClassLibrary.IHabilitaciones.AddHabilitacion(System.String)">
            <summary>
            Este método se implementará para agregar habilitaciones a las diferentes clases que lo requieran
            </summary>
            <param name="nombre">Recibe un string del nombre de la habilitación que se desea agregar</param>
        </member>
        <member name="M:ClassLibrary.IHabilitaciones.RemoveHabilitacion(System.String)">
            <summary>
            Este método se implementará para eliminar habilitaciones de las diferentes clases
            </summary>
            <param name="nombre">Recibe un string con el nombre de la habilitacion que se quiere eliminar</param>
        </member>
        <member name="M:ClassLibrary.IHabilitaciones.GetHabilitacionList">
            <summary>
            Este método se implementará para obtener la en texto la lista de habilitaciones de las clases
            </summary>
        </member>
        <member name="T:ClassLibrary.ITelegram">
            <summary>
            Esta interface sirve para interactuar con la Aplicación de Telegram
            </summary>
        </member>
        <member name="M:ClassLibrary.ITelegram.SendMessage">
            <summary>
            Este método permite enviar mensajes
            </summary>
        </member>
        <member name="M:ClassLibrary.ITelegram.RecibeMessage">
            <summary>
            Este método permite recibir mensajes
            </summary>
        </member>
        <member name="T:ClassLibrary.LimpiadorCadena">
            <summary>
            Esta clase representa un limpiador de cadenas para permitir leer las cadenas correctamente
            </summary>
        </member>
        <member name="M:ClassLibrary.LimpiadorCadena.LimpiaCadena(System.String)">
            <summary>
            Este método sirve para limpiar las cadenas y permitir que no hayan errores de tipeo, 
            y se pueda leer el texto que sea ingresado por un usuario de la aplicación
            </summary>
            <param name="cadena">Recibe por parametro un cadena de tipo String</param>
            <returns>Retorna la cadena una vez que se le aplicaron todos los limpiadores de cadena</returns>
        </member>
        <member name="T:ClassLibrary.Rubro">
            <summary>
            Clase publica Rubro, para que puedan acceder a sus atributos y metodos
            </summary>
        </member>
        <member name="F:ClassLibrary.Rubro.RubrosList">
            <summary>
            Lista publica para que puedan acceder las demas clases, la lista contiene los objetos rubros creados
            </summary>
            <returns>Retorna una nueva lista llamada RubrosList de tipo string</returns>
        </member>
        <member name="M:ClassLibrary.Rubro.AddRubro(System.String)">
            <summary>
            Añade un rubro a la lista, devuelve un string confirmando la accion
            </summary>
            <param name="rubro">Recibe un parametro de tipo string con el nombre de "rubro"</param>
        </member>
        <member name="M:ClassLibrary.Rubro.RemoveRubro(System.String)">
            <summary>
            Elimina un rubro de la lista, devuelve un string confirmando la accion
            </summary>
            <param name="rubro">Recibe un parametro de tipo string con el nombre de "rubro"</param>
        </member>
        <member name="M:ClassLibrary.Rubro.GetRubrosList">
            <summary>
            Obtiene lista de rubros.
            </summary>
        </member>
        <member name="T:ClassLibrary.Usuario">
            <summary>
            Creada clase Usuario de forma publica para que se pueda acceder desde cualquier parte del programa
            </summary>
        </member>
        <member name="M:ClassLibrary.Usuario.#ctor(System.String,System.String,ClassLibrary.Rubro)">
            <summary>
            Se inicializa una instancia de la clase Usuario
            </summary>
            <param name="nombre">Recibe un parametro de tipo string con el valor de "nombre"</param>
            <param name="ubicacion">Recibe un parametro de tipo string con el valor de "ubicacion"</param>
            <param name="rubro">Recibe un parametro de tipo Rubro con el valor de "rubro"</param>
        </member>
        <member name="P:ClassLibrary.Usuario.Nombre">
            <summary>
             Obtiene un valor que indica el nombre del usuario
            </summary>
            <value>Tipo string</value>
        </member>
        <member name="P:ClassLibrary.Usuario.Ubicacion">
            <summary>
             Obtiene un valor que indica la ubicacion del usuario
            </summary>
            <value>Tipo string</value>
        </member>
        <member name="P:ClassLibrary.Usuario.Rubro">
            <summary>
            Obtiene un valor con el rubro del usuario
            </summary>
            <value> Tipo Rubro </value>
        </member>
    </members>
</doc>
