<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:ClassLibrary.Administrador">
            <summary>
            Esta clase representa al Administrador, persona que invitara a las empresas a ingresar a la aplicación.
            Esta clase se creo por Expert, porque es la experta en hacer y conocer las Empresas inicialmente y la
            responsable de llamar al método de agregar rubros y habilitaciones.
            </summary>
        </member>
        <member name="M:ClassLibrary.Administrador.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.Administrador"/>.
            </summary>
        </member>
        <member name="M:ClassLibrary.Administrador.#ctor(System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.Administrador"/>.
            </summary>
            <param name="nombre">Recibe por parametro un string de nombre.</param>
            <param name="clave">Recibe una clave de entrada.</param>
        </member>
        <member name="P:ClassLibrary.Administrador.Nombre">
            <summary>
            Obtiene o establece un valor que le da el nombre al administrador.
            </summary>
            <value>El valor del nombre es de tipo string.</value>
        </member>
        <member name="M:ClassLibrary.Administrador.CambioClave(System.String,System.String)">
            <summary>
            Este método sirve para que el administrador pueda cambiar su contraseña.
            </summary>
            <param name="password">Recibe como parametro la contraseña que se le da por defecto al administrador.</param>
            <param name="nuevaPassword">Recibe como parametro la nueva contraseña que el administrador desea para su cuenta.</param>
        </member>
        <member name="P:ClassLibrary.Administrador.Empresas">
            <summary>
            Esta lista contiene las empresas que el Administrador a invitado a unirse a la aplicación.
            </summary>
            <returns>Retorna la lista de Empresas que contiene.</returns>
        </member>
        <member name="M:ClassLibrary.Administrador.InvitarEmpresa(ClassLibrary.Empresa)">
            <summary>
            Invita a la empresa a unirse en el bot.
            </summary>
            <param name="empresa">Recibe por parametro la empresa que va a invitar.</param>
        </member>
        <member name="M:ClassLibrary.Administrador.CrearEmpresa(System.String,System.String,System.String)">
            <summary>
            Este metodo crea la empresa que el administrador conoce.
            </summary>
            <param name="nombre">Recibe el nombre de la empresa como string.</param>
            <param name="ubicacion">Recibe la ubicacion de la empresa como un string.</param>
            <param name="rubro">Recibe el rubro de la empresa como un string.</param>
        </member>
        <member name="M:ClassLibrary.Administrador.AgregarRubro(System.String)">
            <summary>
            Este método sive para agregar nuevos rubros.
            </summary>
            <param name="nombreRubro">Nombre del Rubro.</param>
        </member>
        <member name="M:ClassLibrary.Administrador.AgregarHabilitacion(System.String)">
            <summary>
            Este método sirve para agregar habilitaciones.
            </summary>
            <param name="nombreHab">Nombre de la habilitación.</param>
        </member>
        <member name="M:ClassLibrary.Administrador.ConvertirJson">
            <summary>
            Metodo que utiliza gracias a la interfaz IJsonConvertible para convertir a formato Json y aplicar en persistencia.
            </summary>
            <returns>Tipo string.</returns>
        </member>
        <member name="T:ClassLibrary.BuscadorMaterial">
            <summary>
            Esta clase representa un buscador por Material, que implementa la interfaz IBuscador.
            La implementación de la interfaz es necesaria para unificar el nombre de su método con otras clases que tiene similares caracteristicas.
            </summary>
            <remarks>
            En este caso se aplicó Polimorfismo al implementar IBuscador ya que evitamos tener una clase que haga una busqueda y dependiendo lo que quieras buscar se comporte de diferente forma.
            Lo que se hizo es que haya una interfaz IBuscador que tenga el método Buscar y que las clases que implementen la interfaz, implemente ese método pero a nivel interno funcionando de forma diferente a las otras clases que lo implementan.
            Se retorna lo que especifica el método en la interfaz, pero dependiendo la clase retorna la oferta que contenga lo buscado.
            </remarks>
        </member>
        <member name="M:ClassLibrary.BuscadorMaterial.Buscar(ClassLibrary.Publicaciones,System.String)">
            <summary>
            Busca ofertas en Publicaciones, según el material de la oferta.
            </summary>
            <param name="publicaciones">Publicaciones.</param>
            <param name="busqueda">Material a buscar.</param>
            <returns>Retorna las ofertas encontradas por Material, mediante una lista de tipo Oferta.</returns>
        </member>
        <member name="T:ClassLibrary.BuscadorTags">
            <summary>
            Clase buscador por tag, que implementa la interfaz IBuscador.
            La implementación de la interfaz es necesaria para unificar el nombre de su método con otras clases que tiene similares caracteristicas.
            </summary>
        </member>
        <member name="M:ClassLibrary.BuscadorTags.Buscar(ClassLibrary.Publicaciones,System.String)">
            <summary>
            Busca ofertas en Publicaciones según los tags de la oferta.
            </summary>
            <remarks>
            A la hora de comparar cuando se hace la búsqueda, especificamos que no sea una búsqueda lingüística agregando a System.StringComparison.OrdinalIgnoreCase
            como parámetro en la comparación.
            Esto quiere decir que las características que son específicas del lenguaje natural se omiten cuando se toman decisiones de comparación y también
            el uso de mayúsculas o minúsculas.
            Y como resultado el código será más rápido y ganará en precisión y confiabilidad.
            Se encarga de buscar ofertas según el Tags de la misma, implementa IBuscador.
            En este caso se aplicó Polimorfismo al implementar IBuscador ya que evitamos tener una clase que haga una búsqueda y dependiendo lo que quieras buscar se comporte de diferente forma.
            Lo que se hizo es que haya una interfaz IBuscador que tenga el método Buscar y que las clases que implementen la interfaz, implemente ese método pero a nivel interno funcionando de forma diferente a las otras clases que lo implementan.
            Se retorna lo que especifica el método en la interfaz, pero dependiendo la clase retorna la oferta que contenga lo buscado.
            </remarks>
            <param name="publicaciones">Recibe un parametro de tipo Publicaciones con el nombre de "publicaciones".</param>
            <param name="busqueda">Recibe un parametro de tipo string con el nombre de "busqueda".</param>
            <returns>Retorna las ofertas encontradas por Tag, mediante una lista de tipo Oferta.</returns>
        </member>
        <member name="T:ClassLibrary.BuscadorUbicacion">
            <summary>
            Se encarga de buscar ofertas segun la ubicación de la misma, implementa IBuscador.
            La implementación de la interfaz es necesaria para unificar el nombre de su método con otras clases que tiene similares caracteristicas.
            En este caso se aplicó Polimorfismo al implementar IBuscador ya que evitamos tener una clase que haga una busqueda y dependiendo lo que quieras buscar se comporte de diferente forma.
            Lo que se hizo es que haya una interfaz IBuscador que tenga el método Buscar y que las clases que implementen la interfaz, implemente ese método pero a nivel interno funcionando de forma diferente a las otras clases que lo implementan.
            Se retorna lo que especifica el método en la interfaz, pero dependiendo la clase retorna la oferta que contenga lo buscado.
            </summary>
        </member>
        <member name="M:ClassLibrary.BuscadorUbicacion.Buscar(ClassLibrary.Publicaciones,System.String)">
            <summary>
            Busca ofertas en las publicaciones, según la ubicación de la oferta.
            </summary>
            <param name="publicaciones">Publicaciones.</param>
            <param name="busqueda">Lo que se va a buscar.</param>
            <returns>Retorna las ofertas encontradas por Ubicación, mediante una lista de tipo Oferta.</returns>
        </member>
        <member name="T:ClassLibrary.ConsolePrinter">
            <summary>
            Esta clase se encarga de imprimir por consola los atributos de oferta.
            </summary>
            <remarks>
            En este caso se aplicó SRP para poder imprimir las ofertas sin tener que modificarlas a ellas.
            </remarks>
        </member>
        <member name="M:ClassLibrary.ConsolePrinter.OfertaPrinter(ClassLibrary.Oferta)">
            <summary>
            Este método imprime por consola los atributos de oferta.
            </summary>
            <param name="oferta">Recibe por parametro una oferta.</param>
        </member>
        <member name="M:ClassLibrary.ConsolePrinter.DatoPrinter(System.String)">
            <summary>
            Este método imprime una string con información.
            </summary>
            <param name="dato">Recibe por parametro un string.</param>
        </member>
        <member name="T:ClassLibrary.ContenedorRubroHabilitaciones">
            <summary>
            Contenedor que tiene Lista de rubros y habilitaciones posibles para el cliente.
            Por otra parte se utiliza el patrón Expert, ya que tiene métodos exclusivos directamente relacioandos a lo que conoce.
            </summary>
        </member>
        <member name="M:ClassLibrary.ContenedorRubroHabilitaciones.#ctor">
            <summary>
            Constructor sin parametros de la clase ContenedorRubroHabilitaciones, ya que es esencial el atributo JsonConstructor
            para la serialización de datos en la clase.
            </summary>
        </member>
        <member name="P:ClassLibrary.ContenedorRubroHabilitaciones.ListaRubros">
            <summary>
            Constructor sin parametros de la clase ContenedorRubroHabilitaciones, ya que es esencial el atributo JsonConstructor
            para la serialización de datos en la clase.
            </summary>
        </member>
        <member name="P:ClassLibrary.ContenedorRubroHabilitaciones.ListaHabilitaciones">
            <summary>
            Constructor sin parametros de la clase ContenedorRubroHabilitaciones, ya que es esencial el atributo JsonConstructor
            para la serialización de datos en la clase.
            </summary>
        </member>
        <member name="M:ClassLibrary.ContenedorRubroHabilitaciones.ChequearRubro(System.String)">
            <summary>
            Método agregado para poder chequear si el rubro que se ingresa, existe en la lista de los rubros disponibles.
            </summary>
            <param name="rubroString">Recibe por parametro un string con el rubro.</param>
            <returns>Retorna true si existe un rubro con ese nombre, en caso contrario retorna false.</returns>
        </member>
        <member name="M:ClassLibrary.ContenedorRubroHabilitaciones.GetRubro(System.String)">
            <summary>
            Método que se encarga de retornar un rubro, si el Rubro.Nombre es igual al pasado por parametros.
            </summary>
            <param name="rubroString">Recibe por parametro un string de rubro.</param>
            <returns>Retorna rubro si existe un rubro con ese nombre, en caso contrario retorna null.</returns>
        </member>
        <member name="M:ClassLibrary.ContenedorRubroHabilitaciones.ChequearHabilitacion(System.String)">
            <summary>
            Método agregado para poder chequear la habilitación que se ingresa, existe en la lista de las habilitaciones disponibles.
            </summary>
            <param name="habilitacionString">Recibe por parametro un string de habilitaciones.</param>
            <returns>Retorna true si existe una habilitacion con ese nombre, en caso contrario retorna false.</returns>
        </member>
        <member name="M:ClassLibrary.ContenedorRubroHabilitaciones.GetHabilitacion(System.String)">
            <summary>
            Método que se encarga de retornar una habilitación, si la Habilitacion.Nombre es igual al pasado por parametros.
            </summary>
            <param name="habilitacionString">Recibe por parametro un string de la Habilitacion.</param>
            <returns>Retorna rubro si existe una habilitacion con ese nombre, en caso contrario retorna null.</returns>
        </member>
        <member name="M:ClassLibrary.ContenedorRubroHabilitaciones.TextoListaHabilitaciones">
            <summary>
            Método que se encarga de retornar los nombres(string) de las habilitaciones que están la lista de habilitaciones.
            </summary>
            <returns>Retorna un string listando las habilitaciones.</returns>
        </member>
        <member name="M:ClassLibrary.ContenedorRubroHabilitaciones.TextoListaRubros">
            <summary>
            Método que se encarga de retornar los nombres(string) de los rubros que están la lista de rubros.
            </summary>
            <returns>Retorna un string listando los rubros.</returns>
        </member>
        <member name="M:ClassLibrary.ContenedorRubroHabilitaciones.CrearRubro(System.String)">
            <summary>
            Crea un rubro y lo agrega a la lista de rubros.
            Se usa Creator ya que agrega y guarda instancias de Rubro.
            </summary>
            <param name="nombreRubro">Nombre del rubro.</param>
        </member>
        <member name="M:ClassLibrary.ContenedorRubroHabilitaciones.CrearHabilitacion(System.String)">
            <summary>
            Crea una habilitacion y la agrega a la lista de habilitaciones.
            Se usa Creator ya que agrega y guarda instancias de Habilitaciones.
            </summary>
            <param name="nombreHabilitacion">Nombre de la habilitación.</param>
        </member>
        <member name="M:ClassLibrary.ContenedorRubroHabilitaciones.ConvertirJson">
            <summary>
            Metodo que utiliza gracias a la interfaz IJsonConvertible para convertir a formato Json y aplicar en persistencia.
            </summary>
            <returns>Retorna la serialización.</returns>
        </member>
        <member name="T:ClassLibrary.Emprendedor">
            <summary>
            Esta clase representa un Emprendedor, que se encarga de buscar ofertas, y de manifestar su interés en las que sean de su agrado.
            Esta clase que contiene habilitaciones requiere, que se implemente la interfaz IHabilitaciones.
            La implementación de la interfaz es necesaria para unificar el nombre de su método con otras clases que tiene similares caracteristicas.
            </summary>
            <remarks>
            Para esta clase se utilizó el patron de diseño de Expert, ya que desde nuestro punto de vista,
            la clase Emprendedor tiene metodos que sean exclusivos de su clase ya que es la que se encarga de conocer
            todo lo necesario para hacer posible la ejecución de sus métodos, y que no sean necesarios para el resto de clases.
            Además, utilizamos herencia para lograr una reutilización de código aceptable, ya que sería muy tedioso y
            mala práctica reutilizar el código sin esta función que nos permite el lenguaje.
            </remarks>
        </member>
        <member name="P:ClassLibrary.Emprendedor.FechaDeOfertasCompradas">
            <summary>
            Este diccionario contiene las ofertas compradas y la fecha correspondiente.
            </summary>
        </member>
        <member name="P:ClassLibrary.Emprendedor.OfertasInteresado">
            <summary>
            Ofertas en las que se interesa el emprendedor.
            </summary>
        </member>
        <member name="P:ClassLibrary.Emprendedor.HabilitacionesEmprendedor">
            <summary>
            Lista de habilitaciones del emprendedor.
            </summary>
        </member>
        <member name="M:ClassLibrary.Emprendedor.#ctor">
            <summary>
            Constructor sin parametros de la clase Emprendedor, ya que es esencial el atributo JsonConstructor
            para la serialización de datos en la clase.
            </summary>
        </member>
        <member name="M:ClassLibrary.Emprendedor.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Inicializa una instancia de la clase Emprendedor.
            </summary>
            <param name="nombre">Nombre del emprededor.</param>
            <param name="ubicacion">Ubicación del emprendedor.</param>
            <param name="rubro">Rubro del emprendedor.</param>
            <param name="especializaciones">Especializaciones del emprendedor.</param>
            <param name="email">Email del emprendedor, para contacatrlo.</param>
        </member>
        <member name="P:ClassLibrary.Emprendedor.Especializaciones">
            <summary>
            Obtiene o establece las Especializaciones del emprendedor.
            </summary>
        </member>
        <member name="P:ClassLibrary.Emprendedor.Email">
            <summary>
            Email del emprendedor.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Emprendedor.AddHabilitacion(System.String)">
            <summary>
            Agrega habilitaciones.
            </summary>
            <param name="habilitacionBuscada">Nombre de la habilitación a agregar.</param>
        </member>
        <member name="M:ClassLibrary.Emprendedor.RemoveHabilitacion(System.String)">
            <summary>
            Quita habilitaciones.
            </summary>
            <param name="habilitacion">Nombre de la habilitaciones a remover.</param>
        </member>
        <member name="M:ClassLibrary.Emprendedor.CalcularOfertasCompradas(System.String,System.String)">
            <summary>
            Calcula cuantas ofertas se han comprado desde diferentes fechas, y cuanto dinero se gastó en ellas.
            </summary>
            <param name="fechaInicio">Fecha de inicio.</param>
            <param name="fechaFinal">Fecha de final.</param>
            <returns>Retorna las ofertas compradas dentro del período de tiempo especificado.</returns>
        </member>
        <member name="M:ClassLibrary.Emprendedor.TextoEmprendedor">
            <summary>
            Agregado por SRP y Expert, la responsabilidad de construir el texto, le corresponde a la clase emprendedor.
            </summary>
            <returns>Retorna un string con los datos del Emprendedor.</returns>
        </member>
        <member name="M:ClassLibrary.Emprendedor.ConvertirJson">
            <summary>
            Metodo que utiliza gracias a la interfaz IJsonConvertible para convertir a formato Json y aplicar en persistencia.
            </summary>
            <returns>Retorna el objeto serializado.</returns>
        </member>
        <member name="T:ClassLibrary.Empresa">
            <summary>
            Esta clase representa una Empresa, que se encarga de crear Ofertas, eliminarlas, aceptarlas y calcular el consumo de ofertas.
            Esta clase que contiene habilitaciones requiere, que se implemente la interfaz IHabilitaciones.
            La implementación de la interfaz es necesaria para unificar el nombre de su método con otras clases que tiene similares caracteristicas.
            </summary>
            <remarks>
            Para esta clase se utilizó el patron de diseño de Expert, ya que desde nuestro punto de vista,
            la clase Empresa tiene metodos que sean exclusivos de su clase ya que es la que se encarga de conocer 
            todo lo necesario para hacer posible la ejecución de sus métodos, y que no sean necesarios para el resto de clases.
            Además, utilizamos herencia para lograr una reutilización de código aceptable, ya que sería muy tedioso y
            mala práctica reutilizar el código sin esta función que nos permite el lenguaje.
            </remarks>
        </member>
        <member name="M:ClassLibrary.Empresa.#ctor">
            <summary>
            Constructor sin parametros de la clase Empresa, ya que es esencial el atributo JsonConstructor
            para la serialización de datos en la clase.
            </summary>
        </member>
        <member name="M:ClassLibrary.Empresa.#ctor(System.String,System.String,System.String)">
            <summary>
            Inicializa una instancia de la clase Empresa.
            </summary>
            <param name="nombre">Nombre de la empresa.</param>
            <param name="ubicacion">Ubicación de la empresa.</param>
            <param name="rubro">Rubro de la empresa.</param>
        </member>
        <member name="P:ClassLibrary.Empresa.FechaOfertasEntregadas">
            <summary>
            Guarda el conjunto de fecha y oferta.
            </summary>
        </member>
        <member name="P:ClassLibrary.Empresa.HabilitacionesEmpresa">
            <summary>
            Obtiene las Habilitaciones que tiene la Empresa.
            </summary>
        </member>
        <member name="P:ClassLibrary.Empresa.InteresadosEnOfertas">
            <summary>
            Obtiene o establece los interesados en Ofertas que tiene la Empresa.
            </summary>
        </member>
        <member name="P:ClassLibrary.Empresa.OfertasAceptadas">
            <summary>
            Obtiene o establece Ofertas de la lista de OfertasAceptadas.
            </summary>
        </member>
        <member name="P:ClassLibrary.Empresa.MisOfertas">
            <summary>
            Esta lista contiene las ofertas realizadas por la empresa.
            </summary>
        </member>
        <member name="M:ClassLibrary.Empresa.CrearOferta(ClassLibrary.Publicaciones,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Este método sirve para crear una oferta. Contiene todos los parametros que son requeridos para tales efectos.
            Se aplica creator ya que agrega y guarda, instancias de la misma clase.
            </summary>
            <param name="publicaciones">Publicaciones.</param>
            <param name="nombre">Nombre de la oferta.</param>
            <param name="nombreMaterial">Nombre del material.</param>
            <param name="cantidad">Cantidad.</param>
            <param name="precio">Precio</param>
            <param name="unidad">Unidad.</param>
            <param name="tags">Tags.</param>
            <param name="ubicacion">Ubicacion.</param>
            <param name="puntualesConstantes">Oferta puntual o constante.</param>
        </member>
        <member name="M:ClassLibrary.Empresa.EliminarOferta(System.String,ClassLibrary.Publicaciones)">
            <summary>
            Elimina una oferta creada de las publicaciones.
            </summary>
            <param name="nombreOfertaParaEliminar">Oferta a eliminar.</param>
            <param name="publicaciones">Publicaciones.</param>
        </member>
        <member name="M:ClassLibrary.Empresa.AceptarOferta(System.String,ClassLibrary.Publicaciones)">
            <summary>
            Quita de las publicaciones, la oferta que fue aceptada, ser aceptada implica que se llegó a un acuerdo con un emprendedor y se quiere quitar la oferta de las publicaciones, además de agregarla a la lista de ofertasAceptadas que contiene la empresa, para realizar un control de cuantas se aceptan.
            </summary>
            <param name="nombreOfertaParaAceptar">Oferta que se quiere aceptar.</param>
            <param name="publicaciones">Publicaciones.</param>
        </member>
        <member name="M:ClassLibrary.Empresa.CalcularOfertasVendidas(System.String,System.String)">
            <summary>
            Calcula cuantas ofertas se entregaron entre diferentes fechas.
            </summary>
            <param name="fechaInicio">Fecha inicio, se debe pasar fecha con formato yyyy-MM-dd.</param>
            <param name="fechaFinal">Fecha final, se debe pasar fecha con formato yyyy-MM-dd.</param>
            <returns>Retorna las ofertas vendidas dentro del período de tiempo especificado.</returns>
        </member>
        <member name="M:ClassLibrary.Empresa.AddHabilitacion(System.String)">
            <summary>
            Agrega habilitaciones que pueda tener la empresa.
            </summary>
            <param name="habilitacionBuscada">Habilitación a buscar.</param>
        </member>
        <member name="M:ClassLibrary.Empresa.RemoveHabilitacion(System.String)">
            <summary>
            Quita habilitaciones que tenga la Empresa.
            </summary>
            <param name="habilitacion">Habilitacion a eliminar.</param>
        </member>
        <member name="M:ClassLibrary.Empresa.VerInteresados">
            <summary>
            Agregado por SRP y Expert, la responsabilidad de ver los interesados en una oferta le corresponde a la misma empresa.
            Este metodo muestra los interesados en una oferta.
            </summary>
            <returns>Retorna un string listando los empresarios interesados en una oferta.</returns>
        </member>
        <member name="M:ClassLibrary.Empresa.TextoEmpresa">
            <summary>
            Agregado por SRP y Expert, la responsabilidad de construir el texto, le corresponde a la clase empresa.
            ya que conoce lo necesario.
            </summary>
            <returns>Retorna un string con los datos de la Empresa.</returns>
        </member>
        <member name="M:ClassLibrary.Empresa.VerMisOfertas">
            <summary>
            Método que devuelve las ofertas publicadas por la empresa.
            </summary>
            <returns>Retorna una lista con la listas de ofertas realizadas por la empresa.</returns>
        </member>
        <member name="M:ClassLibrary.Empresa.ConvertirJson">
            <summary>
            Metodo que utiliza gracias a la interfaz IJsonConvertible para convertir a formato Json y aplicar en persistencia.
            </summary>
            <returns>Retorna el objeto serializado.</returns>
        </member>
        <member name="T:ClassLibrary.Habilitaciones">
            <summary>
            Esta clase representa el global de las habilitaciones existentes, que implementa la interfaz IHabilitaciones.
            La implementación de la interfaz es necesaria para unificar el nombre de su método con otras clases que tiene similares caracteristicas.
            </summary>
            <remarks>
            Se utiliza el patrón Expert, ya que entendemos que esta clase es la encargada, de conocer lo que conoce para su correcto funcionamiento.  
            </remarks>
        </member>
        <member name="M:ClassLibrary.Habilitaciones.#ctor">
            <summary>
            Constructor sin parametros de la clase Habilitaciones, ya que es esencial el atributo JsonConstructor
            para la serialización de datos en la clase.
            </summary>
        </member>
        <member name="M:ClassLibrary.Habilitaciones.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.Habilitaciones"/>.
            </summary>
            <param name="nombre">Nombre.</param>
        </member>
        <member name="P:ClassLibrary.Habilitaciones.Nombre">
            <summary>
            Obtiene o establece el nombre de la habilitación.
            </summary>
            <value>Valor es un string del nombre.</value>
        </member>
        <member name="M:ClassLibrary.Habilitaciones.ConvertirJson">
            <summary>
            Metodo que utiliza gracias a la interfaz IJsonConvertible para convertir a formato Json y aplicar en persistencia. 
            </summary>
            <returns>Retorna la Serialización.</returns>
        </member>
        <member name="T:ClassLibrary.AceptarInvEmpresaHandler">
            <summary>
            Esta clase representa un "Handler" del patrón Chain of Responsibility que implementa el comando "/aceptarinvitacion" y se encarga
            de manejar el caso en que la Empresa acepta la invitación.
            </summary>
        </member>
        <member name="M:ClassLibrary.AceptarInvEmpresaHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.AceptarInvEmpresaHandler"/>.
            </summary>
            <param name="next">Handler siguiente.</param>
        </member>
        <member name="M:ClassLibrary.AceptarInvEmpresaHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje que determina si la Empresa aceptó o no la invitación.
            </summary>
            <param name="mensaje">Mensaje que debe procesar.</param>
            <param name="respuesta">Respuesta al mensaje procesado.</param>
            <returns>Retorna <c>True</c> si se ha podido realizar la operación, o <c>False</c> en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.AceptarOfertaHandler">
            <summary>
            Esta clase representa un "Handler" del patrón Chain of Responsibility que implementa el comando "/aceptaroferta" y se encarga
            de manejar el caso en que la Empresa acepta una oferta.
            </summary>
        </member>
        <member name="M:ClassLibrary.AceptarOfertaHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.AceptarOfertaHandler"/>.
            </summary>
            <param name="next">Handler siguiente.</param>
        </member>
        <member name="M:ClassLibrary.AceptarOfertaHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje que determina si la Empresa aceptó o no la oferta.
            </summary>
            <param name="mensaje">Mensaje que debe procesar.</param>
            <param name="respuesta">Respuesta al mensaje procesado.</param>
            <returns>Retorna <c>True</c> si se ha podido realizar la operación, o <c>False</c> en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.AgregarHabEmprendedorHandler">
            <summary>
            Esta clase representa un "Handler" del patrón Chain of Responsibility que implementa el comando "/agregarhabilitacionemprendedor" y se encarga
            de manejar el caso en que un Emprendedor agrega una habilitación.
            </summary>
        </member>
        <member name="M:ClassLibrary.AgregarHabEmprendedorHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.AgregarHabEmprendedorHandler"/>.
            </summary>
            <param name="next">Handler siguiente.</param>
        </member>
        <member name="M:ClassLibrary.AgregarHabEmprendedorHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje que determina si el Emprendedor agregó o no una habilitación.
            </summary>
            <param name="mensaje">Mensaje que debe procesar.</param>
            <param name="respuesta">Respuesta al mensaje procesado.</param>
            <returns>Retorna <c>True</c> si se ha podido realizar la operación, o <c>False</c> en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.AgregarHabEmpresaHandler">
            <summary>
            Esta clase representa un "Handler" del patrón Chain of Responsibility que implementa el comando "/agregarhabilitacionempresa" y se encarga
            de manejar el caso en que una Empresa agrega una habilitación.
            </summary>
        </member>
        <member name="M:ClassLibrary.AgregarHabEmpresaHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.AgregarHabEmpresaHandler"/>.
            </summary>
            <param name="next">Handler siguiente.</param>
        </member>
        <member name="M:ClassLibrary.AgregarHabEmpresaHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje que determina si la Empresa agregó o no una habilitación.
            </summary>
            <param name="mensaje">Recibe por parametro el mensaje a procesar.</param>
            <param name="respuesta">Recibe por paramtro la respuesta al mensaje procesado.</param>
            <returns>Retorna <c>True</c> si se ha podido realizar la operación, o <c>False</c> en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.AgregarHabilitacionHandler">
            <summary>
            Esta clase representa un "Handler" del patrón Chain of Responsibility que implementa el comando "/agregarhabilitacion" y se encarga
            de manejar el caso en que el Administrador agrega una habilitación.
            </summary>
        </member>
        <member name="M:ClassLibrary.AgregarHabilitacionHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.AgregarHabilitacionHandler"/>.
            </summary>
            <param name="next">Handler siguiente.</param>
        </member>
        <member name="M:ClassLibrary.AgregarHabilitacionHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje que determina si el Administrador agregó o no una habilitación.
            </summary>
            <param name="mensaje">Mensaje que debe procesar.</param>
            <param name="respuesta">Respuesta al mensaje procesado.</param>
            <returns>Retorna <c>True</c> si se ha podido realizar la operación, o <c>False</c> en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.AgregarHabOfertaHandler">
            <summary>
            Esta clase representa un "Handler" del patrón Chain of Responsibility que implementa el comando "/crearhaboferta" y se encarga
            de manejar el caso en que una Empresa quiera crear una nueva habilitación de oferta.
            </summary>
        </member>
        <member name="M:ClassLibrary.AgregarHabOfertaHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.AgregarHabOfertaHandler"/>.
            </summary>
            <param name="next">Handler siguiente.</param>
        </member>
        <member name="M:ClassLibrary.AgregarHabOfertaHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje para que una Empresa pueda crear una nueva habilitación de oferta.
            </summary>
            <param name="mensaje">Mensaje que debe procesar.</param>
            <param name="respuesta">Respuesta al mensaje procesado.</param>
            <returns>Retorna <c>True</c> si se ha podido realizar la operación, o <c>False</c> en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.AgregarRubroHandler">
            <summary>
            Esta clase representa un "Handler" del patrón Chain of Responsibility que implementa el comando "/agregarrubro" y se encarga
            de manejar el caso en que el Administrador agrega un Rubro.
            </summary>
        </member>
        <member name="M:ClassLibrary.AgregarRubroHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.AgregarRubroHandler"/>.
            </summary>
            <param name="next">Handler siguiente.</param>
        </member>
        <member name="M:ClassLibrary.AgregarRubroHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje que determina si el Administrador agregó o no un Rubro.
            </summary>
            <param name="mensaje">Mensaje que debe procesar.</param>
            <param name="respuesta">Respuesta al mensaje procesado.</param>
            <returns>Retorna <c>True</c> si se ha podido realizar la operación, o <c>False</c> en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.BaseHandler">
            <summary>
            Clase base para implementar el patrón Chain of Responsibility. En ese patrón se pasa un mensaje a través de una
            cadena de "handlers" que pueden procesar o no el mensaje. Cada "handler" decide si procesa el mensaje, o si se lo
            pasa al siguiente. Esta clase base implmementa la responsabilidad de recibir el mensaje y pasarlo al siguiente
            "handler" en caso que el mensaje no sea procesado. La responsabilidad de decidir si el mensaje se procesa o no, y
            de procesarlo, se delega a las clases sucesoras de esta clase base.
            </summary>
        </member>
        <member name="P:ClassLibrary.BaseHandler.Next">
            <summary>
            Obtiene o establece el próximo "handler".
            </summary>
            <value>El "handler" que será invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="P:ClassLibrary.BaseHandler.Keywords">
            <summary>
            Obtiene o asigna el conjunto de palabras clave que este "handler" puede procesar.
            </summary>
            <value>Un array de palabras clave.</value>
        </member>
        <member name="M:ClassLibrary.BaseHandler.#ctor(ClassLibrary.IHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.BaseHandler"/>.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.BaseHandler.#ctor(System.String[],ClassLibrary.IHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.BaseHandler"/> con una lista de comandos.
            </summary>
            <param name="keywords">La lista de comandos.</param>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.BaseHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Este método debe ser sobreescrito por las clases sucesores. La clase sucesora procesa el mensaje y retorna
            true o no lo procesa y retorna false.
            </summary>
            <param name="mensaje">El mensaje a procesar.</param>
            <param name="respuesta">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="M:ClassLibrary.BaseHandler.InternalCancel">
            <summary>
            Este método puede ser sobreescrito en las clases sucesores que procesan varios mensajes cambiando de estado
            entre mensajes deben sobreescribir este método para volver al estado inicial. En la clase base no hace nada.
            </summary>
        </member>
        <member name="M:ClassLibrary.BaseHandler.CanHandle(ClassLibrary.IMensaje)">
            <summary>
            Determina si este "handler" puede procesar el mensaje. En la clase base se utiliza el array
            <see cref="P:ClassLibrary.BaseHandler.Keywords"/> para buscar el texto en el mensaje ignorando mayúsculas y minúsculas. Las
            clases sucesores pueden sobreescribir este método para proveer otro mecanismo para determina si procesan o no
            un mensaje.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <returns>true si el mensaje puede ser pocesado; false en caso contrario.</returns>
        </member>
        <member name="M:ClassLibrary.BaseHandler.Handle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente "handler" si existe.
            </summary>
            <param name="mensaje">El mensaje a procesar.</param>
            <param name="respuesta">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:ClassLibrary.BaseHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial. En los "handler" sin estado no hace nada. Los "handlers" que
            procesan varios mensajes cambiando de estado entre mensajes deben sobreescribir este método para volver al
            estado inicial.
            </summary>
        </member>
        <member name="M:ClassLibrary.BaseHandler.ChequearHandler(ClassLibrary.IMensaje,System.String)">
            <summary>
            Se encarga de verificar si se ingresa un comando que corresponda al handler, o si ingresa un mensaje/parametro que corresponda al handler.
            Al hacer este método, se puede reutilizar bastante código.
            Si el HistorialDeChats, no contiene el mensaje.Id, retorna true de todas formas ya que en los handlers, siempre se trabaja con mensaje.Id,
            y si no existe, siempre el handler retornará false y un out string response string.Empty, ya que los handlers son los responsables de encargarse.
            </summary>
            <param name="mensaje">Mensaje.</param>
            <param name="comando">Comando.</param>
            <returns>Retorna <c>True</c> si se ha podido realizar la operación, o <c>False</c> en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.BuscadorMaterialHandler">
            <summary>
            Esta clase representa un "Handler" del patrón Chain of Responsibility que implementa el comando "/buscarmaterial" y se encarga
            de procesar el mensaje para buscar una oferta acorde con el Material especificado.
            </summary>
        </member>
        <member name="M:ClassLibrary.BuscadorMaterialHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.BuscadorMaterialHandler"/>.
            </summary>
            <param name="next">Handler siguiente.</param>
        </member>
        <member name="M:ClassLibrary.BuscadorMaterialHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje para buscar una oferta según el material.
            </summary>
            <param name="mensaje">Mensaje que debe procesar.</param>
            <param name="respuesta">Respuesta al mensaje procesado.</param>
            <returns>Retorna <c>True</c> si se ha podido realizar la operación, o <c>False</c> en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.BuscadorTagHandler">
            <summary>
            Esta clase representa un "Handler" del patrón Chain of Responsibility que implementa el comando "/buscartag" y se encarga
            de procesar el mensaje para buscar una oferta acorde con el Tag especificado.
            </summary>
        </member>
        <member name="M:ClassLibrary.BuscadorTagHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.BuscadorTagHandler"/>.
            </summary>
            <param name="next">Handler siguiente.</param>
        </member>
        <member name="M:ClassLibrary.BuscadorTagHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje para buscar una oferta según el tag.
            </summary>
            <param name="mensaje">Mensaje que debe procesar.</param>
            <param name="respuesta">Respuesta al mensaje procesado.</param>
            <returns>Retorna <c>True</c> si se ha podido realizar la operación, o <c>False</c> en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.BuscadorUbicacionHandler">
            <summary>
            Esta clase representa un "Handler" del patrón Chain of Responsibility que implementa el comando "/buscarubicacion" y se encarga
            de procesar el mensaje para buscar una oferta acorde con la Ubicacion especificada.
            </summary>
        </member>
        <member name="M:ClassLibrary.BuscadorUbicacionHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.BuscadorUbicacionHandler"/>.
            </summary>
            <param name="next">Handler siguiente.</param>
        </member>
        <member name="M:ClassLibrary.BuscadorUbicacionHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje para buscar una oferta según la ubicación.
            </summary>
            <param name="mensaje">Mensaje que debe procesar.</param>
            <param name="respuesta">Respuesta al mensaje procesado.</param>
            <returns>Retorna <c>True</c> si se ha podido realizar la operación, o <c>False</c> en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.CalcularOfertasCompradasHandler">
            <summary>
            Esta clase representa un "Handler" del patrón Chain of Responsibility que implementa el comando "/calcularofertascompradas" y se encarga
            de manejar el caso en que se quieran calcular las ofertas compradas en un determinado período de tiempo.
            </summary>
        </member>
        <member name="M:ClassLibrary.CalcularOfertasCompradasHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.CalcularOfertasCompradasHandler"/>.
            </summary>
            <param name="next">Handler siguiente.</param>
        </member>
        <member name="M:ClassLibrary.CalcularOfertasCompradasHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje que calcula las ofertas compradas en un determinado período de tiempo.
            </summary>
            <param name="mensaje">Mensaje que debe procesar.</param>
            <param name="respuesta">Respuesta al mensaje procesado.</param>
            <returns>Retorna <c>True</c> si se ha podido realizar la operación, o <c>False</c> en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.CalcularOfertasVendidasHandler">
            <summary>
            Esta clase representa un "Handler" del patrón Chain of Responsibility que implementa el comando "/calcularofertasvendidas" y se encarga
            de manejar el caso en que se quieran calcular las ofertas vendidas en un determinado período de tiempo.
            </summary>
        </member>
        <member name="M:ClassLibrary.CalcularOfertasVendidasHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.CalcularOfertasVendidasHandler"/>.
            </summary>
            <param name="next">Handler siguiente.</param>
        </member>
        <member name="M:ClassLibrary.CalcularOfertasVendidasHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje que calcula las ofertas vendidas en un determinado período de tiempo.
            </summary>
            <param name="mensaje">Mensaje que debe procesar.</param>
            <param name="respuesta">Respuesta al mensaje procesado.</param>
            <returns>Retorna <c>True</c> si se ha podido realizar la operación, o <c>False</c> en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.CambioClaveHandler">
            <summary>
            Esta clase representa un "Handler" del patrón Chain of Responsibility que implementa el comando "/cambiarclave" y se encarga
            de manejar el caso en que se quiera cambiar la clave.
            </summary>
        </member>
        <member name="M:ClassLibrary.CambioClaveHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.CambioClaveHandler"/>.
            </summary>
            <param name="next">Handler siguiente.</param>
        </member>
        <member name="M:ClassLibrary.CambioClaveHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Este metodo procesa el mensaje para cambiar la clave.
            </summary>
            <param name="mensaje">Mensaje que debe procesar.</param>
            <param name="respuesta">Respuesta al mensaje procesado.</param>
            <returns>Retorna <c>True</c> si se ha podido realizar la operación, o <c>False</c> en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.ComandosHandler">
            <summary>
            Esta clase representa un "Handler" del patrón Chain of Responsibility que implementa el comando "/comandos" y se encarga
            de manejar el caso en que se quieran ver los comandos que tiene el Bot.
            </summary>
        </member>
        <member name="M:ClassLibrary.ComandosHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.ComandosHandler"/>.
            </summary>
            <param name="next">Handler siguiente.</param>
        </member>
        <member name="M:ClassLibrary.ComandosHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Este método procesa el mensaje para mostrar los comandos disponibles en el Bot.
            </summary>
            <param name="mensaje">Mensaje que debe procesar.</param>
            <param name="respuesta">Respuesta al mensaje procesado.</param>
            <returns>Retorna <c>True</c> si se ha podido realizar la operación, o <c>False</c> en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.CrearEmpresaAdminHandler">
            <summary>
            Esta clase representa un "Handler" del patrón Chain of Responsibility que implementa el comando "/crearempresa" y se encarga
            de manejar el caso en que se quiera crear una nueva Empresa.
            </summary>
        </member>
        <member name="M:ClassLibrary.CrearEmpresaAdminHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.CrearEmpresaAdminHandler"/>.
            </summary>
            <param name="next">Handler siguiente.</param>
        </member>
        <member name="M:ClassLibrary.CrearEmpresaAdminHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Este método procesa el mensaje para crear una nueva Empresa.
            </summary>
            <param name="mensaje">Mensaje que debe procesar.</param>
            <param name="respuesta">Respuesta al mensaje procesado.</param>
            <returns>Retorna <c>True</c> si se ha podido realizar la operación, o <c>False</c> en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.CrearOfertaHandler">
            <summary>
            Esta clase representa un "Handler" del patrón Chain of Responsibility que implementa el comando "/crearoferta" y se encarga
            de manejar el caso en que una Empresa quiera crear una nueva oferta.
            </summary>
        </member>
        <member name="M:ClassLibrary.CrearOfertaHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.CrearOfertaHandler"/>.
            </summary>
            <param name="next">Handler siguiente.</param>
        </member>
        <member name="M:ClassLibrary.CrearOfertaHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje para que una Empresa pueda crear una nueva oferta.
            </summary>
            <param name="mensaje">Mensaje que debe procesar.</param>
            <param name="respuesta">Respuesta al mensaje procesado.</param>
            <returns>Retorna <c>True</c> si se ha podido realizar la operación, o <c>False</c> en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.GetHabListHandler">
            <summary>
            Esta clase representa un "Handler" del patrón Chain of Responsibility que implementa el comando "/listadehabilitaciones" y se encarga
            de manejar el caso en que se quieran ver las habilitaciones.
            </summary>
        </member>
        <member name="M:ClassLibrary.GetHabListHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.GetHabListHandler"/>.
            </summary>
            <param name="next">Handler siguiente.</param>
        </member>
        <member name="M:ClassLibrary.GetHabListHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje para que se muetre una lista con las habilitaciones.
            </summary>
            <param name="mensaje">Mensaje que debe procesar.</param>
            <param name="respuesta">Respuesta al mensaje procesado.</param>
            <returns>Retorna <c>True</c> si se ha podido realizar la operación, o <c>False</c> en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.HolaHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "hola".
            </summary>
        </member>
        <member name="M:ClassLibrary.HolaHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.HolaHandler"/>.
            </summary>
            <param name="next">Handler siguiente.</param>
        </member>
        <member name="M:ClassLibrary.HolaHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Este método procesa el mensaje "Hola".
            </summary>
            <param name="mensaje">Mensaje que debe procesar.</param>
            <param name="respuesta">Respuesta al mensaje procesado.</param>
            <returns>Retorna <c>True</c> si se ha podido realizar la operación, o <c>False</c> en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.InteresadoEnOfertaHandler">
            <summary>
            Esta clase representa un "Handler" del patrón Chain of Responsibility que implementa el comando "/interesarme" y se encarga
            de manejar el caso en que haya un interesado en una oferta.
            </summary>
        </member>
        <member name="M:ClassLibrary.InteresadoEnOfertaHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.InteresadoEnOfertaHandler"/>.
            </summary>
            <param name="next">Handler siguiente.</param>
        </member>
        <member name="M:ClassLibrary.InteresadoEnOfertaHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje para que un emprendedor se pueda interesar en una oferta.
            </summary>
            <param name="mensaje">Mensaje que debe procesar.</param>
            <param name="respuesta">Respuesta al mensaje procesado.</param>
            <returns>Retorna <c>True</c> si se ha podido realizar la operación, o <c>False</c> en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.InvitarEmpresaHandler">
            <summary>
            Esta clase representa un "Handler" del patrón Chain of Responsibility que implementa el comando "/invitarempresa" y se encarga
            de manejar el caso en que haya un interesado en una oferta.
            </summary>
        </member>
        <member name="M:ClassLibrary.InvitarEmpresaHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.InvitarEmpresaHandler"/>.
            </summary>
            <param name="next">Handler siguiente.</param>
        </member>
        <member name="M:ClassLibrary.InvitarEmpresaHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Este método procesa el mensaje con el fin de integrar a una nueva Empresa en el Bot.
            </summary>
            <param name="mensaje">Mensaje que debe procesar.</param>
            <param name="respuesta">Respuesta al mensaje procesado.</param>
            <returns>Retorna <c>True</c> si se ha podido realizar la operación, o <c>False</c> en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.RegistrarAdminHandler">
            <summary>
            Esta clase representa un "Handler" del patrón Chain of Responsibility que implementa el comando "/registaradmin" y se encarga
            de manejar el caso en que se quiera registrar el Administrador.
            </summary>
        </member>
        <member name="M:ClassLibrary.RegistrarAdminHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.RegistrarAdminHandler"/>.
            </summary>
            <param name="next">Handler siguiente.</param>
        </member>
        <member name="M:ClassLibrary.RegistrarAdminHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Este metodo procesa el mensaje para registrar un administrador.
            </summary>
            <param name="mensaje">Mensaje que debe procesar.</param>
            <param name="respuesta">Respuesta al mensaje procesado.</param>
            <returns>Retorna <c>True</c> si se ha podido realizar la operación, o <c>False</c> en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.RegistroEmprendedorHandler">
            <summary>
            Esta clase representa un "Handler" del patrón Chain of Responsibility que implementa el comando "/registrarme" y se encarga
            de manejar el caso en que un nuevo Emprendedor se quiera registrar en el Bot.
            </summary>
        </member>
        <member name="M:ClassLibrary.RegistroEmprendedorHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.RegistroEmprendedorHandler"/>.
            </summary>
            <param name="next">Handler siguiente.</param>
        </member>
        <member name="M:ClassLibrary.RegistroEmprendedorHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje para que un Emprendedor se pueda registrar.
            </summary>
            <param name="mensaje">Mensaje que debe procesar.</param>
            <param name="respuesta">Respuesta al mensaje procesado.</param>
            <returns>Retorna <c>True</c> si se ha podido realizar la operación, o <c>False</c> en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.RemoverHabEmprendedor">
            <summary>
            Esta clase representa un "Handler" del patrón Chain of Responsibility que implementa el comando "/removerhabemprendedor" y se encarga
            de manejar el caso en que un Emprendedor quiera remover una habilitación.
            </summary>
        </member>
        <member name="M:ClassLibrary.RemoverHabEmprendedor.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.RemoverHabEmprendedor"/>.
            </summary>
            <param name="next">Handler siguiente.</param>
        </member>
        <member name="M:ClassLibrary.RemoverHabEmprendedor.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje para que un Emprendedor pueda remover una habilitación.
            </summary>
            <param name="mensaje">Mensaje que debe procesar.</param>
            <param name="respuesta">Respuesta al mensaje procesado.</param>
            <returns>Retorna <c>True</c> si se ha podido realizar la operación, o <c>False</c> en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.RemoveHabEmpresaHandler">
            <summary>
            Esta clase representa un "Handler" del patrón Chain of Responsibility que implementa el comando "/removerhabempresa" y se encarga
            de manejar el caso en que una Empresa quiera remover una habilitación.
            </summary>
        </member>
        <member name="M:ClassLibrary.RemoveHabEmpresaHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.RemoveHabEmpresaHandler"/>.
            </summary>
            <param name="next">Handler siguiente.</param>
        </member>
        <member name="M:ClassLibrary.RemoveHabEmpresaHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje para que una Empresa pueda remover una habilitación.
            </summary>
            <param name="mensaje">Mensaje que debe procesar.</param>
            <param name="respuesta">Respuesta al mensaje procesado.</param>
            <returns>Retorna <c>True</c> si se ha podido realizar la operación, o <c>False</c> en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.RemoverHabOfertaHandler">
            <summary>
            Esta clase representa un "Handler" del patrón Chain of Responsibility que implementa el comando "/removerhaboferta" y se encarga
            de manejar el caso en que una Empresa quiera remover una habilitación.
            </summary>
        </member>
        <member name="M:ClassLibrary.RemoverHabOfertaHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.RemoverHabOfertaHandler"/>.
            </summary>
            <param name="next">Handler siguiente.</param>
        </member>
        <member name="M:ClassLibrary.RemoverHabOfertaHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje para que una Empresa pueda remover una habilitación para una oferta.
            </summary>
            <param name="mensaje">Mensaje que debe procesar.</param>
            <param name="respuesta">Respuesta al mensaje procesado.</param>
            <returns>Retorna <c>True</c> si se ha podido realizar la operación, o <c>False</c> en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.RemoverOfertaHandler">
            <summary>
            Esta clase representa un "Handler" del patrón Chain of Responsibility que implementa el comando "/eliminaroferta" y se encarga
            de manejar el caso en que una Empresa quiera remover una oferta.
            </summary>
        </member>
        <member name="M:ClassLibrary.RemoverOfertaHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.RemoverOfertaHandler"/>.
            </summary>
            <param name="next">Handler siguiente.</param>
        </member>
        <member name="M:ClassLibrary.RemoverOfertaHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje para que una Empresa pueda eliminar una oferta.
            </summary>
            <param name="mensaje">Mensaje que debe procesar.</param>
            <param name="respuesta">Respuesta al mensaje procesado.</param>
            <returns>Retorna <c>True</c> si se ha podido realizar la operación, o <c>False</c> en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.VerEmprendedorHandler">
            <summary>
            Esta clase representa un "Handler" del patrón Chain of Responsibility que implementa el comando "/veremprendedor" y se encarga
            de manejar el caso en que se quiera ver la información de un Emprendedor.
            </summary>
        </member>
        <member name="M:ClassLibrary.VerEmprendedorHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.VerEmprendedorHandler"/>.
            </summary>
            <param name="next">Handler siguiente.</param>
        </member>
        <member name="M:ClassLibrary.VerEmprendedorHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje para que se pueda ver la información de un Emprendedor.
            </summary>
            <param name="mensaje">Mensaje que debe procesar.</param>
            <param name="respuesta">Respuesta al mensaje procesado.</param>
            <returns>Retorna <c>True</c> si se ha podido realizar la operación, o <c>False</c> en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.VerEmpresaHandler">
            <summary>
            Esta clase representa un "Handler" del patrón Chain of Responsibility que implementa el comando "/verempresa" y se encarga
            de manejar el caso en que se quiera ver la información de una Empresa.
            </summary>
        </member>
        <member name="M:ClassLibrary.VerEmpresaHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.VerEmpresaHandler"/>.
            </summary>
            <param name="next">Handler siguiente.</param>
        </member>
        <member name="M:ClassLibrary.VerEmpresaHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje para que se pueda ver la información de una Empresa.
            </summary>
            <param name="mensaje">Mensaje que debe procesar.</param>
            <param name="respuesta">Respuesta al mensaje procesado.</param>
            <returns>Retorna <c>True</c> si se ha podido realizar la operación, o <c>False</c> en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.VerInteresados">
            <summary>
            Esta clase representa un "Handler" del patrón Chain of Responsibility que implementa el comando "/verinteresados" y se encarga
            de manejar el caso en que se quieran ver los interesados en una Oferta específica.
            </summary>
        </member>
        <member name="M:ClassLibrary.VerInteresados.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.VerInteresados"/>.
            </summary>
            <param name="next">Handler siguiente.</param>
        </member>
        <member name="M:ClassLibrary.VerInteresados.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje para que se puedan ver los interesados en una Oferta específica.
            </summary>
            <param name="mensaje">Mensaje que debe procesar.</param>
            <param name="respuesta">Respuesta al mensaje procesado.</param>
            <returns>Retorna <c>True</c> si se ha podido realizar la operación, o <c>False</c> en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.VerMisOfertasHandler">
            <summary>
            Esta clase representa un "Handler" del patrón Chain of Responsibility que implementa el comando "/vermisofertas" y se encarga
            de manejar el caso en que una Empresa quiera ver todas sus ofertas.
            </summary>
        </member>
        <member name="M:ClassLibrary.VerMisOfertasHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.VerMisOfertasHandler"/>.
            </summary>
            <param name="next">Handler siguiente.</param>
        </member>
        <member name="M:ClassLibrary.VerMisOfertasHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje para que una Empresa pueda ver todas sus ofertas.
            </summary>
            <param name="mensaje">Mensaje que debe procesar.</param>
            <param name="respuesta">Respuesta al mensaje procesado.</param>
            <returns>Retorna <c>True</c> si se ha podido realizar la operación, o <c>False</c> en caso contrario.</returns>
        </member>
        <member name="T:ClassLibrary.VerUbicacionEmprendedorHandler">
            <summary>
            Esta clase representa un "Handler" del patrón Chain of Responsibility que implementa el comando "/verubicacion" y se encarga
            de manejar el caso en que se quiera conocer la Ubicación del Emprendedor.
            </summary>
            <remarks>
            Utiliza la API de Ubicación.
            </remarks>
        </member>
        <member name="M:ClassLibrary.VerUbicacionEmprendedorHandler.#ctor(Telegram.Bot.TelegramBotClient,ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.VerUbicacionEmprendedorHandler"/>.
            </summary>
            <param name="client">Recibe por parametro el bot de origen.</param>
            <param name="next">Handler siguiente.</param>
        </member>
        <member name="M:ClassLibrary.VerUbicacionEmprendedorHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje para que se pueda conocer la Ubicación del Emprendedor.
            </summary>
            <param name="mensaje">Mensaje que debe procesar.</param>
            <param name="respuesta">Respuesta al mensaje procesado.</param>
            <returns>Retorna <c>True</c> si se ha podido realizar la operación, o <c>False</c> en caso contrario.</returns>
        </member>
        <member name="M:ClassLibrary.VerUbicacionEmprendedorHandler.Direccion(ClassLibrary.IMensaje)">
            <summary>
            Este método utiliza la dirección del emprendedor para encontrar su ubicacion con la LocationApi.
            Las imagenes de ubicacion obtenidas las almacena en una carpeta por nombre del usuario.
            </summary>
            <param name="mensaje">Recibe por parametro el mensaje a procesar.</param>
            <returns>Retorna una imagen con la dirección.</returns>
        </member>
        <member name="T:ClassLibrary.VerUbicacionEmpresaHandler">
            <summary>
            Esta clase representa un "Handler" del patrón Chain of Responsibility que implementa el comando "/verubicacionempresa" y se encarga
            de manejar el caso en que se quiera conocer la Ubicación de la Empresa.
            </summary>
            <remarks>
            Utiliza la API de Ubicación.
            </remarks>
        </member>
        <member name="M:ClassLibrary.VerUbicacionEmpresaHandler.#ctor(Telegram.Bot.TelegramBotClient,ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.VerUbicacionEmpresaHandler"/>.
            </summary>
            <param name="client">Recibe por parametro el bot de origen.</param>
            <param name="next">Handler siguiente.</param>
        </member>
        <member name="M:ClassLibrary.VerUbicacionEmpresaHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje para que se pueda conocer la Ubicación de la Empresa.
            </summary>
            <param name="mensaje">Mensaje que debe procesar.</param>
            <param name="respuesta">Respuesta al mensaje procesado.</param>
            <returns>Retorna <c>True</c> si se ha podido realizar la operación, o <c>False</c> en caso contrario.</returns>
        </member>
        <member name="M:ClassLibrary.VerUbicacionEmpresaHandler.Direccion(ClassLibrary.IMensaje)">
            <summary>
            Este método utiliza la dirección del emprendedor para encontrar su ubicacion con la LocationApi.
            Las imagenes de ubicacion obtenidas las almacena en una carpeta por nombre del usuario.
            </summary>
            <param name="mensaje">Recibe por parametro el mensaje a procesar.</param>
            <returns>Retorna una imagen con la dirección.</returns>
        </member>
        <member name="T:ClassLibrary.VerUbicacionOfertaHandler">
            <summary>
            Esta clase representa un "Handler" del patrón Chain of Responsibility que implementa el comando "/ubicacionoferta" y se encarga
            de manejar el caso en que se quiera conocer la Ubicación de la Oferta.
            </summary>
            <remarks>
            Utiliza la API de Ubicación.
            </remarks>
        </member>
        <member name="M:ClassLibrary.VerUbicacionOfertaHandler.#ctor(Telegram.Bot.TelegramBotClient,ClassLibrary.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.VerUbicacionOfertaHandler"/>.
            </summary>
            <param name="client">Recibe por parametro el bot de origen.</param>
            <param name="next">Handler siguiente.</param>
        </member>
        <member name="M:ClassLibrary.VerUbicacionOfertaHandler.InternalHandle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje para que se pueda conocer la Ubicación de la Oferta.
            </summary>
            <param name="mensaje">Mensaje que debe procesar.</param>
            <param name="respuesta">Respuesta al mensaje procesado.</param>
            <returns>Retorna <c>True</c> si se ha podido realizar la operación, o <c>False</c> en caso contrario.</returns>
        </member>
        <member name="M:ClassLibrary.VerUbicacionOfertaHandler.Direccion(ClassLibrary.IMensaje,System.String)">
            <summary>
            Este método utiliza la dirección del emprendedor para encontrar su ubicacion con la LocationApi.
            Las imagenes de ubicacion obtenidas las almacena en una carpeta por nombre del usuario.
            </summary>
            <param name="mensaje">El mensaje.</param>
            <param name="nombreOferta">El nombre de la oferta.</param>
            <returns>Retorna una imagen con la dirección.</returns>
        </member>
        <member name="T:ClassLibrary.HistorialChat">
            <summary>
            Esta clase se formó usando Expert y SRP, surgió de la necesidad de que el usuario que se comunique con el bot,
            y tenga un historial relacionado.
            </summary>
        </member>
        <member name="M:ClassLibrary.HistorialChat.#ctor">
            <summary>
            Constructor sin parametros de la clase HistorialChat, ya que es esencial el atributo JsonConstructor
            para la serialización de datos en la clase.
            </summary>
        </member>
        <member name="P:ClassLibrary.HistorialChat.MensajesDelUser">
            <summary>
            Contiene los mensajes enviados por el Usuario.
            </summary>
        </member>
        <member name="P:ClassLibrary.HistorialChat.MensajesDelUserReves">
            <summary>
            Esta lista contiene los mensajes del usuarios listados en forma inversa.
            </summary>
        </member>
        <member name="M:ClassLibrary.HistorialChat.BuscarUltimoComando(System.String)">
            <summary>
            Devueleve una lista que contiene los mensajes despues de el comando ingresado.
            </summary>
            <param name="comando">Recibe por parametro un string con el comando ingresado.</param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.HistorialChat.ComprobarUltimoComandoIngresado(System.String)">
            <summary>
            Chequeo para ver si su ultimo comando ingresado es el buscado en los handlers.
            </summary>
            <param name="comando">Recibe por parametro un string con el comando ingresado.</param>
            <returns>Retorna true si el comando ingresado esta correctamente, o false en caso contrio.</returns>
        </member>
        <member name="M:ClassLibrary.HistorialChat.ConvertirJson">
            <summary>
            Metodo que utiliza gracias a la interfaz IJsonConvertible para convertir a formato Json y aplicar en persistencia.
            </summary>
            <returns>Retorna el objeto serializado.</returns>
        </member>
        <member name="M:ClassLibrary.HistorialChat.HistorialClear">
            <summary>
            Metodo con el fin de poder limpiar el historial del chat para no consumir tanta memoria.
            </summary>
        </member>
        <member name="T:ClassLibrary.IBuscador">
            <summary>
            Interfaz IBuscador que define el metodo a implementar por las clases de busqueda.
            </summary>
            <remarks>
            Mediante el uso de ésta interfaz, se puede incluir el comportamiento de varias fuentes en una clase.
            Por ejemplo, la impletentación que realizan las clases BuscadorMaterial, BuscadorTags y BuscadorUbicacion.
            </remarks>
        </member>
        <member name="M:ClassLibrary.IBuscador.Buscar(ClassLibrary.Publicaciones,System.String)">
            <summary>
            Este método se encaga de buscar dentro de Publicaciones.
            </summary>
            <param name="publicaciones">Recibe "Publicaciones" que es en donde se realizará la búsqueda.</param>
            <param name="busqueda">Recibe un parametro del tipo string que es la palabra a buscar.</param>
            <returns>Retorna una oferta.</returns>
        </member>
        <member name="T:ClassLibrary.IHabilitaciones">
            <summary>
            Esta interface contiene los métodos para agregar, quitar o consultar habilitaciones.
            </summary>
            <remarks>
            Mediante el uso de esta interfaz, se puede incluir el comportamiento de varias fuentes en una clase.
            Por ejemplo, la implementacion que realizan las clases Emprendedor, Empresa y Ofertas.
            </remarks>
        </member>
        <member name="M:ClassLibrary.IHabilitaciones.AddHabilitacion(System.String)">
            <summary>
            Este método se implementará para agregar habilitaciones a las diferentes clases que lo requieran.
            </summary>
            <param name="habilitacionBuscada">Recibe un string del nombre de la habilitación que se desea agregar.</param>
        </member>
        <member name="M:ClassLibrary.IHabilitaciones.RemoveHabilitacion(System.String)">
            <summary>
            Este método se implementará para eliminar habilitaciones de las diferentes clases.
            </summary>
            <param name="habilitacion">Recibe un string con el nombre de la habilitación que se quiere eliminar.</param>
        </member>
        <member name="T:ClassLibrary.IHandler">
            <summary>
            Interfaz para implementar el patrón Chain of Responsibility. En ese patrón se pasa un mensaje a través de una
            cadena de "handlers" que pueden procesar o no el mensaje. Cada "handler" decide si procesa el mensaje, o si se lo
            pasa al siguiente. Esta interfaz define un atributo para definir el próximo "handler" y una una operación para
            recibir el mensaje y pasarlo al siguiente "handler" en caso que el mensaje no sea procesado. La responsabilidad de
            decidir si el mensaje se procesa o no, y de procesarlo, se realiza en las clases que implementan esta interfaz.
            </summary>
            <remarks>
            La interfaz se crea en función del principio de inversión de dependencias, para que los clientes de la cadena de
            responsabilidad, que pueden ser concretos, no dependan de una clase "handler" que potencialmente es abstracta.
            </remarks>
        </member>
        <member name="P:ClassLibrary.IHandler.Next">
            <summary>
            Obtiene el próximo "handler".
            </summary>
            <value>El "handler" que será invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="M:ClassLibrary.IHandler.Handle(ClassLibrary.IMensaje,System.String@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente "handler" si existe.
            </summary>
            <param name="mensaje">El mensaje a procesar.</param>
            <param name="respuesta">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:ClassLibrary.IHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial y cancela el próximo "handler" si existe. Es utilizado para que los
            "handlers" que procesan varios mensajes cambiando de estado entre mensajes puedan volver al estado inicial en
            caso de error por ejemplo.
            </summary>
        </member>
        <member name="T:ClassLibrary.IJsonConvertible">
            <summary>
            Define el tipo que tienen los objetos que pueden ser serializados en y deserializados desde texto en formato Json.
            </summary>
        </member>
        <member name="M:ClassLibrary.IJsonConvertible.ConvertirJson">
            <summary>
            Convierte el objeto a texto en formato Json. El objeto puede ser reconstruido a partir del texto en formato
            Json utilizando JsonSerializer.Deserialize.
            </summary>
            <returns>El objeto convertido a texto en formato Json.</returns>
        </member>
        <member name="T:ClassLibrary.IMensaje">
            <summary>
            Esta interfaz contiene los datos requerido para los envios de mensajes.
            Mediante el uso de esta interfaz, se puede incluir el comportamiento de varias fuentes en una clase.
            </summary>
        </member>
        <member name="P:ClassLibrary.IMensaje.Id">
            <summary>
            Obtiene la identificacion unica del Usuario, que interactua en la App.
            </summary>
            <value>El valor esta dado por el token asignado por Telegram.</value>
        </member>
        <member name="P:ClassLibrary.IMensaje.Text">
            <summary>
            Obtiene el mensaje ingresado pro el Usuario.
            </summary>
            <value>El valor esta dado por una string que ingresa el Usuario.</value>
        </member>
        <member name="T:ClassLibrary.IPrinter">
            <summary>
            Esta interfaz contiene un método para imprimir.
            </summary>
            <remarks>
            En este caso se aplicó SRP para poder imprimir las ofertas sin tener que modificarlas a ellas.
            Mediante el uso de esta interfaz, se puede incluir el comportamiento de varias fuentes en una clase.
            </remarks>
        </member>
        <member name="M:ClassLibrary.IPrinter.OfertaPrinter(ClassLibrary.Oferta)">
            <summary>
            Este método hace un print de la oferta.
            </summary>
            <param name="oferta">Oferta.</param>
            <returns>Retorna una oferta para imprimir.</returns>
        </member>
        <member name="T:ClassLibrary.LimpiadorCadenas">
            <summary>
            Esta clase representa un limpiador de cadenas para permitir leer las cadenas correctamente.
            </summary>
        </member>
        <member name="M:ClassLibrary.LimpiadorCadenas.LimpiaCadena(System.String)">
            <summary>
            Este método sirve para limpiar las cadenas y permitir que no hayan errores de escritura, y se pueda leer el texto que sea ingresado por un usuario de la aplicación.
            </summary>
            <param name="cadena">Recibe por parametro un cadena de tipo String.</param>
            <returns>Retorna la cadena una vez que se le aplicaron todos los limpiadores de cadena.</returns>
        </member>
        <member name="M:ClassLibrary.LimpiadorCadenas.LimpiaCadenaRespuesta(System.String)">
            <summary>
            Este método sirve para limpiar las cadenas de respuestas que el usuario ingresará.
            Creemos necesario tener un limpiador de cadenas así, ya que el usuario podria digitar el texto de cualquier forma, con mayusculas, minusculas o combinaciones de ambas.
            </summary>
            <param name="respuesta">Recibe como parametro una cadena de caracteres de tipo String.</param>
            <returns>Devuelve la cadena pero con las modificaciones realizadas.</returns>
        </member>
        <member name="T:ClassLibrary.Distance">
            <summary>
            Representa la distancia entre las coordenas o las direcciones de origen y destino retornada en los métodos
            <see cref="M:ClassLibrary.LocationApiClient.GetDistanceAsync(ClassLibrary.Location,ClassLibrary.Location)"/> o
            <see cref="M:ClassLibrary.LocationApiClient.GetDistanceAsync(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="P:ClassLibrary.Distance.Found">
            <summary>
            Obtiene o establece un valor que indica si se encontraron o no las coordenas o las direcciones de origen y
            destino.
            </summary>
            <value><c>True</c> si se encontró la dirección; <c>False</c> en caso contrario.</value>
        </member>
        <member name="P:ClassLibrary.Distance.TravelDistance">
            <summary>
            Obtiene o establece la distancia entre las coordenadas o las direcciones de origen y destino.
            </summary>
            <value>La distancia en metros.</value>
        </member>
        <member name="P:ClassLibrary.Distance.TravelDuration">
            <summary>
            Obtiene o establece el tiempo que se demora en llegar de las coordenadas o de las direcciones de origen a las de destino.
            </summary>
            <value>El tiempo que se demora en minutos.</value>
        </member>
        <member name="T:ClassLibrary.Location">
            <summary>
            Representa las coordenadas y otros datos de la ubicación de una dirección retornada en el método
            <see cref="M:ClassLibrary.LocationApiClient.GetLocationAsync(System.String,System.String,System.String,System.String)"/>.
            </summary>
        </member>
        <member name="P:ClassLibrary.Location.Found">
            <summary>
            Obtiene o establece un valor que indica si se encontró o no la dirección. En ese caso son válidos los demás
            valores. En caso contrario los demás valores son indeterminados.
            </summary>
            <value>true si se encontró la dirección; false en caso contrario.</value>
        </member>
        <member name="P:ClassLibrary.Location.AddresLine">
            <summary>
            Obtiene o establece la dirección: calle y número, ruta y kilómetro, etc.
            </summary>
            <value>Por ejemplo, Avenida 8 de Octubre 2738.</value>
        </member>
        <member name="P:ClassLibrary.Location.CountryRegion">
            <summary>
            Obtiene o establece el país.
            </summary>
            <value>Por ejemplo, Uruguay.</value>
        </member>
        <member name="P:ClassLibrary.Location.FormattedAddress">
            <summary>
            Obtiene o establece la dirección completa, incluyendo ciudad, código postal, etc.
            </summary>
            <value>Por ejemplo, Avenida 8 de Octubre 2738, Montevideo, 11200, Uruguay.</value>
        </member>
        <member name="P:ClassLibrary.Location.Locality">
            <summary>
            Obtiene o establece la localidad o ciudad.
            </summary>
            <value>Por ejemplo, Montevideo.</value>
        </member>
        <member name="P:ClassLibrary.Location.PostalCode">
            <summary>
            Obtiene o establece el código postal.
            </summary>
            <value>Por ejemplo, 11200.</value>
        </member>
        <member name="P:ClassLibrary.Location.Latitude">
            <summary>
            Obtiene o establece la latitud de la dirección.
            </summary>
            <value>El valor de la latitud en formato decimal.</value>
        </member>
        <member name="P:ClassLibrary.Location.Longitude">
            <summary>
            Obtiene o establece la longitud de la dirección.
            </summary>
            <value>El valor de la longitud en formato decimal.</value>
        </member>
        <member name="T:ClassLibrary.LocationApiClient">
            <summary>
            Un cliente de la API de localización.
            </summary>
        </member>
        <member name="M:ClassLibrary.LocationApiClient.GetLocationAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Obtiene las coordenadas de una dirección.
            </summary>
            <param name="address">La dirección.</param>
            <param name="city">La ciudad. Es opcional. El valor predeterminado es Montevideo.</param>
            <param name="department">El departamento, estado, provincia, etc. Es opcional. El valor predeterminado es `ontevideo.</param>
            <param name="country">El país. Es opcional. El valor predeterminado es Uruguay.</param>
            <returns>Las coordenadas de la dirección.</returns>
        </member>
        <member name="M:ClassLibrary.LocationApiClient.GetLocation(System.String,System.String,System.String,System.String)">
            <inheritdoc cref="M:ClassLibrary.LocationApiClient.GetLocationAsync(System.String,System.String,System.String,System.String)" />
            <remarks>
            Versión sincrónica.
            </remarks>
        </member>
        <member name="M:ClassLibrary.LocationApiClient.GetDistanceAsync(ClassLibrary.Location,ClassLibrary.Location)">
            <summary>
            Obtiene la distancia entre dos coordenadas.
            </summary>
            <param name="from">La coordenada de origen.</param>
            <param name="to">La coordenada de destino.</param>
            <returns>La distancia entre las dos coordenadas.</returns>
        </member>
        <member name="M:ClassLibrary.LocationApiClient.GetDistance(ClassLibrary.Location,ClassLibrary.Location)">
            <inheritdoc cref="M:ClassLibrary.LocationApiClient.GetDistanceAsync(ClassLibrary.Location,ClassLibrary.Location)" />
            <remarks>
            Versión sincrónica.
            </remarks>
        </member>
        <member name="M:ClassLibrary.LocationApiClient.GetDistanceAsync(System.String,System.String)">
            <summary>
            Obtiene la distancia entre dos direcciones.
            </summary>
            <param name="from">La dirección de origen.</param>
            <param name="to">La dirección de destino.</param>
            <returns>La distancia entre las dos direcciones.</returns>
        </member>
        <member name="M:ClassLibrary.LocationApiClient.GetDistance(System.String,System.String)">
            <inheritdoc cref="M:ClassLibrary.LocationApiClient.GetDistanceAsync(System.String,System.String)" />.
            <remarks>
            Versión sincrónica.
            </remarks>
        </member>
        <member name="M:ClassLibrary.LocationApiClient.DownloadMapAsync(System.Double,System.Double,System.String,System.Int32)">
            <summary>
            Descarga una mapa de una coordenada.
            </summary>
            <param name="latitude">La latitud de la coordenada.</param>
            <param name="longitude">La longitud de la coordenada.</param>
            <param name="path">La ruta del archivo donde guardar el mapa. El formato es PNG.</param>
            <param name="zoomLevel">El nivel de zoom del mapa entre 1 y 20. Es opcional. El valor predeterminado es
            15.</param>
            <returns>
            Una tarea que representa la operación asincrónica.
            </returns>
        </member>
        <member name="M:ClassLibrary.LocationApiClient.DownloadMap(System.Double,System.Double,System.String,System.Int32)">
            <inheritdoc cref="M:ClassLibrary.LocationApiClient.DownloadMapAsync(System.Double,System.Double,System.String,System.Int32)" />.
            <remarks>
            Versión sincrónica.
            </remarks>
        </member>
        <member name="M:ClassLibrary.LocationApiClient.DownloadRouteAsync(System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Un mapa con una ruta entre dos coordenadas.
            </summary>
            <param name="fromLatitude">La latitud de la coordenada de origen.</param>
            <param name="fromLongitude">La longitu de la coordenada de origen.</param>
            <param name="toLatitude">La latitud de la coordenada de destino.</param>
            <param name="toLongitude">La longitud de la coordenada de destino.</param>
            <param name="path">La ruta del archivo donde guardar el mapa. Es formato es PNG.</param>
            <returns>
            Una tarea que representa la operación asincrónica.
            </returns>
        </member>
        <member name="M:ClassLibrary.LocationApiClient.DownloadRoute(System.Double,System.Double,System.Double,System.Double,System.String)">
            <inheritdoc cref="M:ClassLibrary.LocationApiClient.DownloadRouteAsync(System.Double,System.Double,System.Double,System.Double,System.String)" />
            <remarks>
            Versión sincrónica.
            </remarks>
        </member>
        <member name="M:ClassLibrary.LocationApiClient.Dispose">
            <inheritdoc cref="T:System.IDisposable" />
        </member>
        <member name="M:ClassLibrary.LocationApiClient.Dispose(System.Boolean)">
            <inheritdoc cref="T:System.IDisposable" />
        </member>
        <member name="T:ClassLibrary.ContenedorPrincipal">
            <summary>
            Esta clase contiene Información en listas y diccionarios de las partes esenciales del programa.
            </summary>
            <remarks>La creación de clases y la asignación de responsabilidades se hizo en base en un patron GRASP: Low Coupling and High Cohesion,
            buscando mantener un equilibrio entre cohesión y acoplamiento.
            </remarks>
        </member>
        <member name="M:ClassLibrary.ContenedorPrincipal.#ctor">
            <summary>
            Constructor sin parámetros de la clase Empresa, ya que es esencial el atributo JsonConstructor
            para la serialización de datos en la clase.
            </summary>
        </member>
        <member name="P:ClassLibrary.ContenedorPrincipal.HistorialDeChats">
            <summary>
            Guarda un conjunto de Chats que ingresa el usuario.
            </summary>
        </member>
        <member name="P:ClassLibrary.ContenedorPrincipal.EmpresasInvitadas">
            <summary>
            Guarda un conjunto de Empresas Invitadas.
            </summary>
        </member>
        <member name="P:ClassLibrary.ContenedorPrincipal.Emprendedores">
            <summary>
            Guarda un conjunto Emprendedor, y su chat id.
            </summary>
        </member>
        <member name="P:ClassLibrary.ContenedorPrincipal.Empresas">
            <summary>
            Guarda un conjunto Empresa, y su chat id.
            </summary>
        </member>
        <member name="P:ClassLibrary.ContenedorPrincipal.Publicaciones">
            <summary>
            Guarda una instancia de Publicaciones.
            </summary>
        </member>
        <member name="P:ClassLibrary.ContenedorPrincipal.ContenedorRubrosHabs">
            <summary>
            Obtiene o establece rubros y habilitaciones.
            </summary>
        </member>
        <member name="P:ClassLibrary.ContenedorPrincipal.BuscadorUbicacion">
            <summary>
            Obtiene o establece una instancia de BuscadorUbicacion.
            </summary>
        </member>
        <member name="P:ClassLibrary.ContenedorPrincipal.BuscadorTags">
            <summary>
            Obtiene o establece una instancia de BuscadorTags.
            </summary>
        </member>
        <member name="P:ClassLibrary.ContenedorPrincipal.BuscadorMaterial">
            <summary>
            Obtiene o establece una instancia de BuscadorMat.
            </summary>
        </member>
        <member name="P:ClassLibrary.ContenedorPrincipal.PrinterConsola">
            <summary>
            Obtiene o establece una instancia de ConsolePrinter.
            </summary>
        </member>
        <member name="P:ClassLibrary.ContenedorPrincipal.ListaNombreOfertas">
            <summary>
            Obtiene o establece strings con los nombres de oferta.
            </summary>
        </member>
        <member name="F:ClassLibrary.ContenedorPrincipal.Administradores">
            <summary>
            Guarda un conjunto de administradores.
            </summary>
        </member>
        <member name="M:ClassLibrary.ContenedorPrincipal.ConvertirJson">
            <summary>
            Metodo que utiliza gracias a la interfaz IJsonConvertible para convertir a formato Json y aplicar en persistencia.
            </summary>
            <returns>El objeto serializado.</returns>
        </member>
        <member name="T:ClassLibrary.LogicaAdministrador">
            <summary>
            Esta clase se encarga de contener la lógica relacionada con el Administrador.
            </summary>
        </member>
        <member name="M:ClassLibrary.LogicaAdministrador.RegistroAdministrador(System.String,System.String,System.String)">
            <summary>
            Este método sirve para registrar al administrador en el bot.
            Por defecto la clave para registrarse iniciamente es "equipo_16", debe verificar para poder registrarse.
            </summary>
            <param name="nombre">Recibe el nombre del Administrador como un string.</param>
            <param name="clave">Recibe una clave de acceso que es suministrada al Admin.</param>
            <param name="id">Recibe el id del Admin.</param>
        </member>
        <member name="M:ClassLibrary.LogicaAdministrador.InvitarEmpresa(ClassLibrary.Administrador,System.String)">
            <summary>
            Invita a la empresa a unirse al bot.
            </summary>
            <param name="administrador">Recibe por parametro un Administrador.</param>
            <param name="nombreEmpresa">Recibe por parametro un string con nombre la empresa.</param>
        </member>
        <member name="M:ClassLibrary.LogicaAdministrador.CambioClave(ClassLibrary.Administrador,System.String,System.String)">
            <summary>
            Implementa los cambios de claves del Administrador.
            Inicialmente se le recomienda al Administrador cambiar su clave cuando se registra.
            </summary>
            <param name="administrador">Recibe por parametro el Administrador de referencia.</param>
            <param name="clave">Recibe por parametro la pass antigua.</param>
            <param name="nuevaClave">Recibe por parametro la nueva pass.</param>
        </member>
        <member name="M:ClassLibrary.LogicaAdministrador.CrearEmpresa(ClassLibrary.Administrador,System.String,System.String,System.String)">
            <summary>
            Este método crea una nueva empresa conocida por el administrador.
            </summary>
            <param name="administrador">Recibe por parametro el Administrador de referencia.</param>
            <param name="nombreEmpresa">Recibe por parametro el nombre de la empresa.</param>
            <param name="ubicacionEmpresa">Recibe por paramtro la ubicacion de la empresa.</param>
            <param name="rubroEmpresa">Recibe por parametro el rubro al que pertenece la empresa.</param>
        </member>
        <member name="M:ClassLibrary.LogicaAdministrador.AgregarRubro(ClassLibrary.Administrador,System.String)">
            <summary>
            Este método sive para agregar nuevos rubros.
            </summary>
            <param name="administrador">Recibe por parametro un administrador.</param>
            <param name="nombrRubro">Recibe por paramtro el nombre del rubro.</param>
        </member>
        <member name="M:ClassLibrary.LogicaAdministrador.AgregarHabilitacion(ClassLibrary.Administrador,System.String)">
            <summary>
            Este método sirve para agregar habilitaciones.
            </summary>
            <param name="administrador">Recibe por parametro un administrador.</param>
            <param name="nombrHabilitacion">Recibe por parametro el nombre de la habilitacion.</param>
        </member>
        <member name="T:ClassLibrary.LogicaBuscadores">
            <summary>
            Esta clase contiene a los buscadores.
            </summary>
            <remarks>La creación de clases y la asignación de responsabilidades se hizo en base en un patron GRASP: Low Coupling and High Cohesion,
            buscando mantener un equilibrio entre cohesión y acoplamiento.
            </remarks>
        </member>
        <member name="M:ClassLibrary.LogicaBuscadores.BuscarPorMaterial(System.String)">
            <summary>
            Llama al método Buscar para realizar una búsqueda por Material.
            </summary>
            <param name="busqueda">Palabra clave para buscar.</param>
            <returns>Retorna las publicaciones que coinciden con el Material especificado.</returns>
        </member>
        <member name="M:ClassLibrary.LogicaBuscadores.BuscarPorTags(System.String)">
            <summary>
            Llama al método Buscar para realizar una búsqueda por Tags.
            </summary>
            <param name="busqueda">Palabra clave para buscar.</param>
            <returns>Retorna las ofertas encontradas.</returns>
            <returns>Retorna las publicaciones que coinciden con el Tag especificado.</returns>
        </member>
        <member name="M:ClassLibrary.LogicaBuscadores.BuscarPorUbicacion(System.String)">
            <summary>
            Llama al método Buscar para realizar una búsqueda por Ubicación.
            </summary>
            <param name="busqueda">Palabra clave para buscar.</param>
            <returns>Retorna las publicaciones que coinciden con la Ubicación especificada.</returns>
        </member>
        <member name="T:ClassLibrary.LogicaEmprendedor">
            <summary>
            Esta clase contiene la lógica del emprendedor.
            </summary>
            <remarks>
            Contiene un método para llamar a cada método de la clase Emprendedor.
            La creación de clases y la asignación de responsabilidades se hizo en base en un patron GRASP: Low Coupling and High Cohesion,
            buscando mantener un equilibrio entre cohesión y acoplamiento.
            </remarks>
        </member>
        <member name="M:ClassLibrary.LogicaEmprendedor.RegistroEmprendedor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Registro de usuario para ser emprendedor.
            </summary>
            <param name="nombre">Nombre del emprendedor.</param>
            <param name="ubicacion">Ubicacion del emprendedor.</param>
            <param name="rubro">Rubro del emprendedor.</param>
            <param name="especializaciones">Especializaciones del emprendedor.</param>
            <param name="email">Email del emprendedor, para contacatrlo.</param>
            <param name="id">Id del chat.</param>
        </member>
        <member name="M:ClassLibrary.LogicaEmprendedor.AddHabilitacion(ClassLibrary.Emprendedor,System.String)">
            <summary>
            Este método se encarga de llamar a AddHabilitación de Emprendedor.
            </summary>
            <param name="emprendedor">Un emprendedor.</param>
            <param name="habilitacionBuscada">Nombre de la habilitación a agregar.</param>
        </member>
        <member name="M:ClassLibrary.LogicaEmprendedor.RemoveHabilitacion(ClassLibrary.Emprendedor,System.String)">
            <summary>
            Este método se encarga de llamar a RemoveHabilitación de Emprendedor.
            </summary>
            <param name="emprendedor">Un emprendedor.</param>
            <param name="habilitacion">Nombre de la habilitación a remover.</param>
        </member>
        <member name="M:ClassLibrary.LogicaEmprendedor.InteresadoEnOferta(ClassLibrary.Emprendedor,System.String)">
            <summary>
            Este método llama a InteresadoEnOferta de Emprendedor.
            </summary>
            <param name="emprendedor">Un emprendedor.</param>
            <param name="nombreOferta">Una oferta.</param>
        </member>
        <member name="M:ClassLibrary.LogicaEmprendedor.CalcularOfertasCompradas(ClassLibrary.Emprendedor,System.String,System.String)">
            <summary>
            Este método llama a CalcularOfertasCompradas de Emprendedor.
            </summary>
            <param name="emprendedor">Un emprendedor.</param>
            <param name="fechaInicio">Fecha de inicio.</param>
            <param name="fechaFinal">Fecha de final.</param>
            <returns>Retorna las ofertas compradas dentro del período de tiempo especificado.</returns>
        </member>
        <member name="M:ClassLibrary.LogicaEmprendedor.VerEmprendedor(ClassLibrary.Emprendedor)">
            <summary>
            Este método permite crear una ficha del emprendedor en texto, para poder obtener sus datos.
            </summary>
            <param name="emprendedor">Recibe por parámetro un objeto de tipo Emprendedor.</param>
            <returns>Retorna la información de un Emprendedor.</returns>
        </member>
        <member name="T:ClassLibrary.LogicaEmpresa">
            <summary>
            Esta clase se encarga de la lógica relacionada a Empresa.
            </summary>
            <remarks>La creación de clases y la asignación de responsabilidades se hizo en base en un patron GRASP: Low Coupling and High Cohesion,
            buscando mantener un equilibrio entre cohesión y acoplamiento.
            </remarks>
        </member>
        <member name="M:ClassLibrary.LogicaEmpresa.CrearOferta(ClassLibrary.Empresa,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de Oferta.
            </summary>
            <param name="empresa">Recibe por parametro la empresa que creo la oferta.</param>
            <param name="nombre">Recibe por parametro el nombre de la oferta.</param>
            <param name="nombreMaterial">Recibe por parametro el nombre del material de la oferta.</param>
            <param name="cantidad">Recibe por parametro la cantidad de la oferta.</param>
            <param name="precio">Recibe por parametro el precio de la oferta.</param>
            <param name="unidad">Recibe por parametro la unidad de la oferta.</param>
            <param name="tags">Recibe por parametro el tags de la oferta.</param>
            <param name="ubicacion">Recibe por parametro la ubicacion de la oferta.</param>
            <param name="constantesPuntuales">Recibe por parametro que indica si es contante de la oferta.</param>
        </member>
        <member name="M:ClassLibrary.LogicaEmpresa.EliminarOferta(ClassLibrary.Empresa,System.String)">
            <summary>
            Llama al método EliminarProducto en empresa con los parametros pasados.
            </summary>
            <param name="empresa">Empresa que eliminará la oferta.</param>
            <param name="nombre">Nombre de la oferta que se desea eliminar.</param>
        </member>
        <member name="M:ClassLibrary.LogicaEmpresa.AceptarOferta(ClassLibrary.Empresa,System.String)">
            <summary>
            Llama al método AceptarOferta en empresa con los parametros pasados.
            </summary>
            <param name="empresa">Empresa que aceptará la oferta.</param>
            <param name="ofertaQueSeAcepta">Nombre de oferta que se desea Aceptar.</param>
        </member>
        <member name="M:ClassLibrary.LogicaEmpresa.CalcularOfertasVendidas(ClassLibrary.Empresa,System.String,System.String)">
            <summary>
            Llama al método CalcularOfertasVendidasSegunTiempo en empresa con los parametros pasados.
            </summary>
            <param name="empresa">Empresa que quiere calcular sus ofertas vendidas segun x tiempo.</param>
            <param name="fechaInicio">Fecha inicio, se debe pasar fecha con formato YYYY-MM-DD.</param>
            <param name="fechaFinal">Fecha final, se debe pasar fecha con formato YYYY-MM-DD.</param>
            <returns>Retorna las ofertas vendidas dentro del período de tiempo especificado.</returns>
        </member>
        <member name="M:ClassLibrary.LogicaEmpresa.AddHabilitacion(ClassLibrary.Empresa,System.String)">
            <summary>
            Llama al método AddHabilitacion en empresa con los parametros pasados.
            </summary>
            <param name="empresa">Empresa a la que se desea agregar una habilitación.</param>
            <param name="habilitacionBuscada">Habilitacion para ser agregada.</param>
        </member>
        <member name="M:ClassLibrary.LogicaEmpresa.RemoveHabilitacion(ClassLibrary.Empresa,System.String)">
            <summary>
            Llama al método RemoveHabilitacion en empresa con los parametros pasados.
            </summary>
            <param name="empresa">Empresa a la que se desea remover una habilitación.</param>
            <param name="habilitacion">Habilitacion para ser removida.</param>
        </member>
        <member name="M:ClassLibrary.LogicaEmpresa.AgregarHabilitacionOferta(ClassLibrary.Empresa,System.String,System.String)">
            <summary>
            Este método se encarga de agregar habilitaciones para las ofertas.
            </summary>
            <param name="empresa">empresa.</param>
            <param name="habilitacion">habilitacion a agregar.</param>
            <param name="nombreOferta">nombre de la oferta.</param>
        </member>
        <member name="M:ClassLibrary.LogicaEmpresa.RemoveHabilitacionOferta(ClassLibrary.Empresa,System.String,System.String)">
            <summary>
            Este método se encarga de remover habilitaciones para las ofertas.
            </summary>
            <param name="empresa">Empresa.</param>
            <param name="habilitacion">Nombre de la habilitacion.</param>
            <param name="nombreOferta">Nombre de la oferta.</param>
        </member>
        <member name="M:ClassLibrary.LogicaEmpresa.VerInteresados(ClassLibrary.Empresa)">
            <summary>
            Este método muestra los interesados en una oferta.
            </summary>
            <param name="empresa">Empresa.</param>
            <returns>Retorna los interesados en la oferta.</returns>
        </member>
        <member name="M:ClassLibrary.LogicaEmpresa.VerEmpresa(ClassLibrary.Empresa)">
            <summary>
            Método que devuelve todos los atributos de la empresa.
            </summary>
            <param name="empresa">Empresa.</param>
            <returns>Retorna la información de la Empresa.</returns>
        </member>
        <member name="M:ClassLibrary.LogicaEmpresa.VerMisOfertas(ClassLibrary.Empresa)">
            <summary>
            Método que devuelve las ofertas publicadas por la empresa.
            </summary>
            <param name="empresa">Empresa.</param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.Material">
            <summary>
            Clase publica Material, para que puedan acceder a sus atributos y metodos.
            </summary>
            <remarks>
            Para esta clase se utilizó el patron de diseño de Expert, ya que desde nuestro punto de vista,
            la clase Material se encarga de conocer todo lo necesario para hacer posible su correcto funcionamiento.
            </remarks>
        </member>
        <member name="M:ClassLibrary.Material.#ctor">
            <summary>
            Constructor sin parametros de la clase Material, ya que es esencial el atributo JsonConstructor
            para la serialización de datos en la clase.
            </summary>
        </member>
        <member name="M:ClassLibrary.Material.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase.
            </summary>
            <param name="tipo">Recibe por parametro el tipo del matrial.</param>
            <param name="cantidad">Recibe por parametro la cantidad del matrial.</param>
            <param name="precio">Recibe por parametro el precio del matrial.</param>
            <param name="unidad">Recibe por parametro la unidad del matrial.</param>
        </member>
        <member name="P:ClassLibrary.Material.Tipo">
            <summary>
            Obtiene o establece el nombre del material.
            </summary>
            <value>string</value>
        </member>
        <member name="P:ClassLibrary.Material.Cantidad">
            <summary>
            Obtiene o establece la cantidad del material.
            </summary>
            <value>String.</value>
        </member>
        <member name="P:ClassLibrary.Material.Precio">
            <summary>
            Obtiene o establece el precio del material.
            </summary>
            <value>String.</value>
        </member>
        <member name="P:ClassLibrary.Material.Unidad">
            <summary>
            Obtiene o establece la unidad del material.
            </summary>
            <value>String.</value>
        </member>
        <member name="M:ClassLibrary.Material.ConvertirJson">
            <summary>
            Metodo que utiliza gracias a la interfaz IJsonConvertible para convertir a formato Json y aplicar en persistencia.
            </summary>
            <returns>Retorna el objeto serializado.</returns>
        </member>
        <member name="T:ClassLibrary.MyReferenceHandler">
            <summary>
            Este handler sirve pare referenciar a los handlers, usa Singleton.
            </summary>
        </member>
        <member name="P:ClassLibrary.MyReferenceHandler.Instance">
            <summary>
            Sirve para la instanciacion de handler de referencia.
            </summary>
        </member>
        <member name="M:ClassLibrary.MyReferenceHandler.#ctor">
            <summary>
            Con esto se resetea el handler de referencia.
            </summary>
        </member>
        <member name="M:ClassLibrary.MyReferenceHandler.CreateResolver">
            <summary>
            Con esto se resetea el handler de referencia.
            </summary>
        </member>
        <member name="M:ClassLibrary.MyReferenceHandler.Reset">
            <summary>
            Con esto se resetea el handler de referencia.
            </summary>
        </member>
        <member name="T:ClassLibrary.Oferta">
            <summary>
            Esta clase representa una oferta.
            Esta clase que contiene habilitaciones requiere, que se implemente la interfaz IHabilitaciones.
            La implementación de la interfaz es necesaria para unificar el nombre de su método con otras clases que tiene similares caracteristicas.
            </summary>
            <remarks>
            Para esta clase se utilizó el patron de diseño de Expert, ya que desde nuestro punto de vista,
            la clase Ofertas tiene metodos que son exclusivos de su clase ya que es la que se encarga de conocer
            todo lo necesario para hacer posible la ejecución de sus métodos, y que no sean necesarios para el resto de clases.
            </remarks>
        </member>
        <member name="M:ClassLibrary.Oferta.#ctor">
            <summary>
            Constructor sin parametros de la clase Oferta, ya que es esencial el atributo JsonConstructor
            para la serialización de datos en la clase.
            </summary>
        </member>
        <member name="P:ClassLibrary.Oferta.HabilitacionesOferta">
            <summary>
            Constructor para json.
            </summary>
        </member>
        <member name="M:ClassLibrary.Oferta.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,ClassLibrary.Empresa)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.Oferta"/>.
            </summary>
            <param name="nombre">Recibe por parametro el nombre de la oferta.</param>
            <param name="nombreMaterial">Recibe por parametro el nombre del material de la oferta.</param>
            <param name="cantidad">Recibe por parametro la cantidad de la oferta.</param>
            <param name="precio">Recibe por parametro el precio de la oferta.</param>
            <param name="unidad">Recibe por parametro la unidad de la oferta.</param>
            <param name="tags">Recibe por parametro el tags de la oferta.</param>
            <param name="ubicacion">Recibe por parametro la ubicacion de la oferta.</param>
            <param name="constantesPuntuales">Recibe por parametro que indica si es contante de la oferta.</param>
            <param name="empresa">Recibe por parametro la empresa que creo la oferta.</param>
        </member>
        <member name="P:ClassLibrary.Oferta.Interesado">
            <summary>
            Nombre del interesado en la oferta.
            </summary>
        </member>
        <member name="P:ClassLibrary.Oferta.Nombre">
            <summary>
            Obtiene o establece el nombre de la oferta.
            </summary>
        </member>
        <member name="P:ClassLibrary.Oferta.Material">
            <summary>
            Obtiene o establece el Material del producto a ofertar.
            </summary>
        </member>
        <member name="P:ClassLibrary.Oferta.Tags">
            <summary>
            Obtiene o establece los Tags de la Oferta.
            </summary>
        </member>
        <member name="P:ClassLibrary.Oferta.Ubicacion">
            <summary>
            Obtiene o establece la Ubicación de la oferta.
            </summary>
        </member>
        <member name="P:ClassLibrary.Oferta.EmpresaCreadora">
            <summary>
            Obtiene o establece la empresa creadora de la oferta.
            </summary>
        </member>
        <member name="P:ClassLibrary.Oferta.ConstantesPuntuales">
            <summary>
            Obtiene o establece un valor que indica si la Oferta es constante o puntual.
            </summary>
        </member>
        <member name="M:ClassLibrary.Oferta.AddHabilitacion(System.String)">
            <summary>
            Añade una habilitación a la oferta.
            </summary>
            <param name="habilitacionBuscada">Nombre de la habilitación a agregar.</param>
        </member>
        <member name="M:ClassLibrary.Oferta.RemoveHabilitacion(System.String)">
            <summary>
            Quita una habilitación a la oferta.
            </summary>
            <param name="habilitacion">Habilitacion a quitar.</param>
        </member>
        <member name="P:ClassLibrary.Oferta.FechaDePublicacion">
            <summary>
            Obtiene la Fecha en la que se publicó la oferta.
            </summary>
        </member>
        <member name="M:ClassLibrary.Oferta.TextoOferta">
            <summary>
            Agregado por SRP y Expert, la responsabilidad de construir el texto, le corresponde a la clase oferta.
            ya que conoce lo necesario.
            </summary>
            <returns>Retorna un string con la información de la Oferta.</returns>
        </member>
        <member name="M:ClassLibrary.Oferta.TextoInteresados">
            <summary>
            Agregado por SRP y Expert, la responsabilidad de construir el texto, le corresponde a la clase oferta.
            ya que conoce lo necesario.
            </summary>
            <returns>Retorna un string listando los interesados en la oferta.</returns>
        </member>
        <member name="M:ClassLibrary.Oferta.ConvertirJson">
            <summary>
            Metodo que utiliza gracias a la interfaz IJsonConvertible para convertir a formato Json y aplicar en persistencia.
            </summary>
            <returns>Retorna el objeto serializado.</returns>
        </member>
        <member name="T:ClassLibrary.OpcionesUso">
            <summary>
            Esta clase contiene los métodos para poder hacer más fácil la tarea de que el usuario ingrese un comando para poder operar en el bot.
            Se utilizan métodos estaticos porque no se requiere instanciar la clase para utilizarlos.
            </summary>
        </member>
        <member name="M:ClassLibrary.OpcionesUso.AccionesEmprendedor">
            <summary>
            Este método contiene todas las instrucciones que un emprendedor puede llegar a realizar.
            </summary>
            <returns>Retorna un string con cada comando.</returns>
        </member>
        <member name="M:ClassLibrary.OpcionesUso.AccionesEmpresas">
            <summary>
            Este método contiene todas las instrucciones que una empresa puede llegar a utilizar.
            </summary>
            <returns>Retorna un string con cada comando.</returns>
        </member>
        <member name="M:ClassLibrary.OpcionesUso.AccionesAdministradores">
            <summary>
            Este método contiene todas las instrucciones que un Administrador puede llegar a utilizar.
            </summary>
            <returns>Retorna un string con cada comando.</returns>
        </member>
        <member name="T:ClassLibrary.PlataformaPrinter">
            <summary>
            Esta clase se encarga de imprimir por consola los atributos de oferta.
            </summary>
            <remarks>
            En este caso se aplicó SRP para poder imprimir las ofertas sin tener que modificarlas a ellas y no hacerlo directamente en la clase Ofertas por ejemplo.
            </remarks>
        </member>
        <member name="M:ClassLibrary.PlataformaPrinter.OfertaPrinter(ClassLibrary.Oferta)">
            <summary>
            Este método imprime por consola los atributos de oferta.
            </summary>
            <param name="oferta">Una oferta.</param>
        </member>
        <member name="M:ClassLibrary.PlataformaPrinter.BusquedaPrinter(System.Collections.Generic.List{ClassLibrary.Oferta})">
            <summary>
            Este método imprime una string con información.
            </summary>
            <param name="resultadoBusqueda">El resultado de la búsqueda.</param>
        </member>
        <member name="T:ClassLibrary.Publicaciones">
            <summary>
            Esta clase se encarga de las Publicaciones.
            </summary>
            <remarks>
            Para esta clase se utilizó el patron de diseño de Expert, ya que desde nuestro punto de vista,
            la clase Publicaciones tiene metodos que son exclusivos de su clase ya que es la que se encarga de conocer
            todo lo necesario para hacer posible la ejecución de sus métodos, y que no sean necesarios para el resto de clases.
            </remarks>
        </member>
        <member name="M:ClassLibrary.Publicaciones.#ctor">
            <summary>
            Constructor sin parametros de la clase Publicaciones, ya que es esencial el atributo JsonConstructor
            para la serialización de datos en la clase.
            </summary>
        </member>
        <member name="P:ClassLibrary.Publicaciones.OfertasPublicados">
            <summary>
            Una lista que contiene las ofertas.
            </summary>
        </member>
        <member name="M:ClassLibrary.Publicaciones.GetOfertasPublicados">
            <summary>
            Este método imprime las ofertas contenidas en OfertasPublicados.
            </summary>
        </member>
        <member name="M:ClassLibrary.Publicaciones.ConvertirJson">
            <summary>
            Metodo que utiliza gracias a la interfaz IJsonConvertible para convertir a formato Json y aplicar en persistencia.
            </summary>
            <returns>Retorna el objeto serializado.</returns>
        </member>
        <member name="T:ClassLibrary.Rubro">
            <summary>
            Clase publica Rubro, para que puedan acceder a sus atributos y metodos.
            </summary>
            <remarks>
            Para esta clase se utilizó el patron de diseño de Expert, ya que desde nuestro punto de vista,
            la clase Rubro tiene metodos que son exclusivos de su clase ya que es la que se encarga de conocer 
            todo lo necesario para hacer posible su correcto funcionamiento.
            </remarks>
        </member>
        <member name="M:ClassLibrary.Rubro.#ctor">
            <summary>
            Inicializa un constructor sin parametros de la clase Rubro, ya que es esencial el atributo JsonConstructor
            para la serialización de datos en la clase.
            </summary>
        </member>
        <member name="M:ClassLibrary.Rubro.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.Rubro"/>.
            </summary>
            <param name="nombre">Recibe por parametro el nombre del rubro.</param>
        </member>
        <member name="P:ClassLibrary.Rubro.Nombre">
            <summary>
            Obtiene o establece el nombre del rubro.
            </summary>
            <value>El nombre del Rubro.</value>
        </member>
        <member name="M:ClassLibrary.Rubro.ConvertirJson">
            <summary>
            Metodo que utiliza gracias a la interfaz IJsonConvertible para convertir a formato Json y aplicar en persistencia. 
            </summary>
            <returns>Retorna el objeto serializado.</returns>
        </member>
        <member name="T:ClassLibrary.Singleton`1">
            <summary>
            Esta clase utiliza el patron singleton, para lograr que instancias se puedan usar a lo largo del programa sin necesidad de crear una nueva
            cada vez, o definirlas como estáticas.
            </summary>
            <typeparam name="T">Recibe por parametro una variable generica.</typeparam>
        </member>
        <member name="P:ClassLibrary.Singleton`1.Instancia">
            <summary>
            Obtiene o establece la Instancia del Singleton.
            </summary>
        </member>
        <member name="T:ClassLibrary.TelegramMsgAdapter">
            <summary>
            La clase que encapsula el mensaje que recibe
            En este caso se aplicó el patrón Adapter para poder adaptar el mensaje recibido por Telegram.
            </summary>
        </member>
        <member name="F:ClassLibrary.TelegramMsgAdapter.Mensaje">
            <summary>
            El mensaje recibido desde Telegram.
            </summary>
        </member>
        <member name="M:ClassLibrary.TelegramMsgAdapter.#ctor(Telegram.Bot.Types.Message)">
            <summary>
            Inicializa una instancia de la clase TelegramMsgAdapter
            </summary>
            <param name="msg">Recibe un tipo Message de Telegram.</param>
        </member>
        <member name="P:ClassLibrary.TelegramMsgAdapter.Id">
            <summary>
            Obtiene el ID de los mensajes del chat.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.TelegramMsgAdapter.Text">
            <summary>
            Obtiene el mensaje.
            </summary>
            <value></value>
        </member>
        <member name="T:ClassLibrary.Ubicacion">
            <summary>
            Esta clase se encarga de contener la Ubicacion.
            </summary>
            <remarks>
            Para la cración de esta clase se aplicó el patrón Expert puesto que la ubicación es la que tiene que conocer a la calle y no otras clases directamente.
            </remarks>
        </member>
        <member name="M:ClassLibrary.Ubicacion.#ctor">
            <summary>
            Constructor sin parametros de la clase Ubicacion, ya que es esencial el atributo JsonConstructor
            para la serialización de datos en la clase.
            </summary>
        </member>
        <member name="M:ClassLibrary.Ubicacion.#ctor(System.String)">
            <summary>
            /// Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.Ubicacion"/>.
            </summary>
            <param name="nombre">Nombre.</param>
        </member>
        <member name="P:ClassLibrary.Ubicacion.NombreCalle">
            <summary>
            Esta propiedad contiene el nombre de la calle.
            </summary>
            <value>Valor es un string del nombre.</value>
        </member>
        <member name="M:ClassLibrary.Ubicacion.ConvertirJson">
            <summary>
            Metodo que utiliza gracias a la interfaz IJsonConvertible para convertir a formato Json y aplicar en persistencia. 
            </summary>
            <returns>Retorna el objeto serializado.</returns>
        </member>
        <member name="T:ClassLibrary.Usuario">
            <summary>
            Creada clase Usuario de forma publica para que se pueda acceder desde cualquier parte del programa.
            </summary>
            <remarks>
            Creamos la clase Usuario con el fin de que la misma pueda ser usada en la reutilización del código en el programa aplicando Herencia.
            Por otra parte está clase se formó respetando el patrón Expert
            </remarks>
        </member>
        <member name="M:ClassLibrary.Usuario.#ctor">
            <summary>
            Constructor sin parametros de la clase Usuario, ya que es esencial el atributo JsonConstructor
            para la serialización de datos en la clase.
            </summary>
        </member>
        <member name="M:ClassLibrary.Usuario.#ctor(System.String,System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.Usuario"/>.
            </summary>
            <param name="nombre">Recibe un parametro de tipo string con el valor de "nombre".</param>
            <param name="ubicacion">Recibe un parametro de tipo string con el valor de "ubicacion".</param>
            <param name="rubro">Recibe un parametro de tipo Rubro con el valor de "rubro".</param>
        </member>
        <member name="P:ClassLibrary.Usuario.Nombre">
            <summary>
            Obtiene o establece un valor que indica el nombre del usuario.
            </summary>
            <value>Tipo string.</value>
        </member>
        <member name="P:ClassLibrary.Usuario.Ubicacion">
            <summary>
            Obtiene o establece el valor que indica la ubicación del usuario.
            </summary>
            <value>Tipo string.</value>
        </member>
        <member name="P:ClassLibrary.Usuario.Rubro">
            <summary>
            Obtiene o establece el valor con el rubro del usuario.
            </summary>
            <value>Tipo Rubro.</value>
        </member>
        <member name="M:ClassLibrary.Usuario.ConvertirJson">
            <summary>
            Metodo que utiliza gracias a la interfaz IJsonConvertible para convertir a formato Json y aplicar en persistencia.
            </summary>
            <returns>Retorna el objeto serializado.</returns>
        </member>
    </members>
</doc>
